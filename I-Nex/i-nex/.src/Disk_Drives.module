' Gambas module file

' Copyright(C) 2011-2014, Michał Głowienka aka eloaders <eloaders@linux.pl>
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program. If not, see <http://www.gnu.org/licenses/>.

Public Logs As New Logger
Public block_drive As String = "Finfosys.ComboBox4.Text"
Public device_model As String
Public device_vendor As String
Public mount_point As String
Public device_uuid As String
Public real_size As String
Public filesystem_type As String
Public mount_widtch As String
Public device_rev As String
Public max_sectors As String
Public device_state As String
Public modalias As String
Public Used As String
Public check_swap As String
Public removable As String
Public ext_range As String
Public range As String
Public add_random As String
Public discard_granularity As String
Public discard_max_bytes As String
Public discard_zeroes_data As String
Public hw_sector_size As String
Public max_hw_sectors_kb As String
Public max_sectors_kb As String
Public max_segments As String
Public max_segment_size As String
Public read_ahead_kb As String
Public scheduler As String
Public max_ratio As String
Public min_ratio As String
Public stable_pages_required As String
Public logical_block_size As String ' logical_block_size
Public iostats As String 'iostats
Public minimum_io_size As String ' minimum_io_size
Public nomerges As String ' nomerges
Public nr_requests As String ' nr_requests
Public optimal_io_size As String ' optimal_io_size
Public physical_block_size As String ' physical_block_size
Public rotational As String ' rotational
Public rq_affinity As String ' rq_affinity

Public Sub _inits()
  Dim Avail_HDD As Integer 
  Logs("Add Drives to ComboBox", Logger.Info)
  Finfosys.ComboBox4.Clear
  For Avail_HDD = 1 To Dir("/sys/block/", "sd*").Count
   Finfosys.ComboBox4.Add(Dir("/sys/block/", "sd*")[Avail_HDD - 1])
  Next
  For Avail_HDD = 1 To Dir("/sys/block/", "sr*").Count
   Finfosys.ComboBox4.Add(Dir("/sys/block/", "sr*")[Avail_HDD - 1])
  Next
End

Public Sub _init_2()
  Dim count As Integer
  Logs("Add Drives to ComboBox..", Logger.Info)
  Finfosys.ComboBox3.Clear
  For count = 1 To Dir("/sys/block/" & Finfosys.ComboBox4.Text & "", "sd*").Count
   Finfosys.ComboBox3.Add(Dir("/sys/block/" & Finfosys.ComboBox4.Text & "", "" & Left$(Finfosys.ComboBox4.Text, - 1) & "*")[count - 1])
  Next
  
  For count = 1 To Dir("/sys/block/" & Finfosys.ComboBox4.Text & "", "sr*").Count
   Finfosys.ComboBox3.Add(Dir("/sys/block/" & Finfosys.ComboBox4.Text & "", "" & Left$(Finfosys.ComboBox4.Text, - 1) & "*")[count - 1])
  Next
  Finfosys.ComboBox3.Index = 0
End

Public Sub get_informations()
  Logs("Get informations of Drives", Logger.Info)
  Try device_model = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/device/model"), "\n", "")
  Try device_vendor = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/device/vendor"), "\n", "")
  Try device_rev = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/device/rev"), "\n", "")
  Try max_sectors = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/device/max_sectors"), "\n", "")
  Try device_state = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/device/state"), "\n", "")
  Try modalias = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/device/modalias"), "\n", "")
  Try removable = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/removable"), "\n", "")
  Try ext_range = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/ext_range"), "\n", "")
  Try range = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/range"), "\n", "")
  Try add_random = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/add_random"), "\n", "")
  Try discard_granularity = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/discard_granularity"), "\n", "")
  Try discard_max_bytes = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/discard_max_bytes"), "\n", "")
  Try discard_zeroes_data = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/discard_zeroes_data"), "\n", "")
  Try hw_sector_size = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/hw_sector_size"), "\n", "")
  Try iostats = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/iostats"), "\n", "")
  Try logical_block_size = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/logical_block_size"), "\n", "")
  Try max_hw_sectors_kb = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/max_hw_sectors_kb"), "\n", "")
  Try max_sectors_kb = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/max_sectors_kb"), "\n", "")
  Try max_segments = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/max_segments"), "\n", "")
  Try max_segment_size = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/max_segment_size"), "\n", "")
  Try minimum_io_size = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/minimum_io_size"), "\n", "")
  Try nomerges = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/nomerges"), "\n", "")
  Try nr_requests = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/nr_requests"), "\n", "")
  Try optimal_io_size = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/optimal_io_size"), "\n", "")
  Try physical_block_size = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/physical_block_size"), "\n", "")
  Try read_ahead_kb = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/read_ahead_kb"), "\n", "")
  Try scheduler = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/scheduler"), "\n", "")
  Try rotational = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/rotational"), "\n", "")
  Try rq_affinity = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/queue/rq_affinity"), "\n", "")
  
  Try real_size = ((Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/" & Finfosys.ComboBox3.Text & "/size"), "\n", "") / 1024000) / 2) & " GB"
  
  Try max_ratio = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/bdi/max_ratio"), "\n", "")
  Try min_ratio = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/bdi/min_ratio"), "\n", "")
  Try stable_pages_required = Replace(File.Load("/sys/block/" & Finfosys.ComboBox4.Text & "/bdi/stable_pages_required"), "\n", "")
  
  Shell "sed -n \"2p\" /proc/swaps | awk {'print $1'} | cut -d \"/\" -f 3" Wait To check_swap
  If check_swap Not Like Finfosys.ComboBox3.Text Then
   Shell "blkid | grep swap | cut -d \":\" -f 1 | cut -d \"/\" -f 3" Wait To check_swap
  Endif
  Shell "LC_ALL=C df | grep \"" & Finfosys.ComboBox3.Text & "\" | awk {'print $5'} | sed -n '1p'" Wait To used
  Used = Replace(Replace(Used, "%", ""), "\n", "")

  Logs("Get informations of Drives Done", Logger.Info)
  disks()
End

Public Sub disks()
  filesystem_type = Null
  mount_widtch = Null
  mount_point = Null
  device_uuid = Null
  
  If Finfosys.ComboBox3.Text Not Like "" Then
   Shell "grep -w \"" & Finfosys.ComboBox3.Text & "\" /proc/mounts | awk {'print $4'}" Wait To mount_widtch
  Endif
   Shell "LC_ALL=C df | grep -w \"" & Finfosys.ComboBox3.Text & "\" | awk {'print $6, $7'} | sed -n \"1p\"" Wait To mount_point
   Shell "ls -l /dev/disk/by-uuid/ | grep -w \"" & Finfosys.ComboBox3.Text & "\" | awk {'print $9'}" Wait To device_uuid
  
   device_uuid = Replace(Replace(device_uuid, " ", ""), "\n", "")
    Shell "grep -w \"" & Finfosys.ComboBox3.Text & "\" /proc/mounts | awk {'print $3'}" Wait To filesystem_type
    filesystem_type = Replace(Replace(filesystem_type, " ", ""), "\n", "")

  If IsNull(mount_widtch) And Not IsNull(device_uuid) Then
   Shell "grep -w \"" & device_uuid & "\" /proc/mounts | awk {'print $4'}" Wait To mount_widtch
  Endif
  
  mount_widtch = Replace(mount_widtch, "\n", "")

  If IsNull(filesystem_type) Or IsBlank(filesystem_type) And Not IsNull(device_uuid) Then
   Shell "grep -w \"" & device_uuid & "\" /proc/mounts | awk {'print $3'}" Wait To filesystem_type
  Endif
  If IsNull(filesystem_type) Or IsBlank(filesystem_type) Then
   Shell "ls -l /sys/fs/*/* | grep -w \"" & Finfosys.ComboBox3.Text & "\" | cut -d '/' -f 4" Wait To filesystem_type
  Endif
  filesystem_type = Replace(Replace(filesystem_type, " ", ""), "\n", "")
  
  If IsNull(device_uuid) Then
   filesystem_type = Null
  Endif
  
  If mount_point Like "*Mounted on*" Then 
   Shell "LC_ALL=C df | grep -w \"" & Finfosys.ComboBox4.Text & "\" | awk {'print $6, $7'} | sed -n '1p'" Wait To mount_point
  Endif
  mount_point = Replace(mount_point, "\n", "")
  
  ' Fixes for blkid (Manjaro Linux) (Arch Based)
  If Len(device_uuid) < 9 Then
   Shell "blkid | grep " & Finfosys.ComboBox3.Text & " | awk {'print $4'} | tr '\"' ' ' | tr 'UUID=' ' '" Wait To device_uuid
   device_uuid = Replace(device_uuid, " ", "")
  Endif
  If IsNull(filesystem_type) = True Then
   Shell "blkid | grep " & Finfosys.ComboBox3.Text & " | awk {'print $5'} | tr '\"' ' ' | tr 'TYPE=' ' '" Wait To filesystem_type
   filesystem_type = Replace(filesystem_type, " ", "")
  Endif
   
End
