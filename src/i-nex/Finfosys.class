' Gambas class file


PUBLIC SUB Form_Open()
  DIM cpuz0, cpuz1, cpuz2, cpuz3, cpuz4, cpuz5, cpuz6, cpuz7, cpuz8, cpuz9, cpuz10, cpuz11 AS String
  IF Exist("/usr/bin/gnome-screenshot") THEN 
  Button2.Visible = TRUE
  ENDIF 
  TextArea28.Visible = FALSE 
  TextLabel21.Visible = FALSE
  'Procesor
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '1p'" WAIT TO cpuz0
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '2p'" WAIT TO cpuz1
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '3p'" WAIT TO cpuz2
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '4p'" WAIT TO cpuz3
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '5p'" WAIT TO cpuz4
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '6p'" WAIT TO cpuz5
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '7p'" WAIT TO cpuz6
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '8p'" WAIT TO cpuz7
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '9p'" WAIT TO cpuz8
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '10p'" WAIT TO cpuz9
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '11p'" WAIT TO cpuz10
  SHELL "ls /sys/devices/system/cpu/ | grep -v save | sed -n '12p'" WAIT TO cpuz11
  
  cpuz0 = Replace(cpuz0, "\n", "")
  cpuz1 = Replace(cpuz1, "\n", "")
  cpuz2 = Replace(cpuz2, "\n", "")
  cpuz3 = Replace(cpuz3, "\n", "")
  cpuz4 = Replace(cpuz4, "\n", "")
  cpuz5 = Replace(cpuz5, "\n", "")
  cpuz6 = Replace(cpuz6, "\n", "")
  cpuz7 = Replace(cpuz7, "\n", "")
  cpuz8 = Replace(cpuz8, "\n", "")
  cpuz9 = Replace(cpuz9, "\n", "")
  cpuz10 = Replace(cpuz10, "\n", "")
  cpuz11 = Replace(cpuz11, "\n", "")
IF (cpuz0 = "cpu0") = TRUE THEN
ComboBox1.Add("Procesor0")
ENDIF

IF (cpuz1 = "cpu1") = TRUE THEN
ComboBox1.Add("Procesor1")
ENDIF

IF (cpuz2 = "cpu2") = TRUE THEN
ComboBox1.Add("Procesor2")
ENDIF

IF (cpuz3 = "cpu3") = TRUE THEN
ComboBox1.Add("Procesor3")
ENDIF

IF (cpuz4 = "cpu4") = TRUE THEN
ComboBox1.Add("Procesor4")
ENDIF

IF (cpuz5 = "cpu5") = TRUE THEN
ComboBox1.Add("Procesor5")
ENDIF

IF (cpuz6 = "cpu6") = TRUE THEN
ComboBox1.Add("Procesor6")
ENDIF

IF (cpuz7 = "cpu7") = TRUE THEN
ComboBox1.Add("Procesor7")
ENDIF

IF (cpuz8 = "cpu8") = TRUE THEN
ComboBox1.Add("Procesor8")
ENDIF

IF (cpuz9 = "cpu9") = TRUE THEN
ComboBox1.Add("Procesor9")
ENDIF

IF (cpuz10 = "cpu10") = TRUE THEN
ComboBox1.Add("Procesor10")
ENDIF

IF (cpuz11 = "cpu11") = TRUE THEN
ComboBox1.Add("Procesor11")
ENDIF

dospam_uptime()
System()
bios()
kernel()
internet()
dzwiek()
grafika()
dysk()
ComboBox1.Text = "Procesor0"
Label25.Text = Application.version
'Okno na środku
ME.Center

END 


PUBLIC SUB ComboBox1_Click()

  Wykrywanie_procesorow()

END

PUBLIC SUB kernel()
  DIM stringa, risultato, kernel, uzywanyobecniekernel AS String
  DIM righe AS NEW string[]
  DIM count AS Integer
  DIM riga AS NEW String[]
  DIM lista AS NEW String[]
  SHELL "ls /boot/vmlinuz* | cut -d '/' -f 3 " WAIT TO TextArea47.Text
  SHELL "ls /boot/vmlinuz* | cut -d '/' -f 3 | wc -l" WAIT TO Label16.Text
  SHELL "uname -r" WAIT TO Label26.Text
  'Usuwanie kerneli
  SHELL "bash -c /usr/bin/check_kernel" WAIT TO stringa 
  'dpkg-query -f '${status} ${package}\n' -W linux-image-\* | grep '^install ok installed ' | cut -d' ' -f4
  righe = Split(stringa, "\n", "%%", TRUE)  
  
  FOR count = 2 TO righe.Max
     
     riga = Split(righe[count], " ", "%%", TRUE)
     
     risultato = Replace(riga[0], " ", "")
     lista.add(risultato)
  NEXT 
  
  ComboBox3.List = lista
  ComboBox3.Index = 0
  'Koniec usuwania kerneli
  
END

PUBLIC SUB dzwiek()
  
  DIM kartadzwiekowa, kartadzwiekowa2 AS String
  SHELL "lspci | grep 'udio' | cut -d ':' -f 3 | cut -d '(' -f 1" WAIT TO kartadzwiekowa
  TextArea18.Text = kartadzwiekowa

END

PUBLIC SUB dysk()
  DIM wolnegbnadysku, dysktwardy, zajetegb, calkowitapoj AS String
  DIM wolgb, zajgb, calkowite AS Float
  'SHELL "cat /proc/scsi/scsi | grep ATA | head -1 | cut -d ':' -f 3 | cut -d ' ' -f 2-3 && echo $(cat /proc/partitions | grep sda | head -n 1 | awk {'print $3'})/1024/1024 | bc && echo GB" WAIT TO dysktwardy
  SHELL "cat /proc/scsi/scsi | grep 'Vendor'" WAIT TO dysktwardy
  SHELL "echo $(df -m | grep '/' | awk {'print $4'} | head -1)/1000 | bc && echo GB" WAIT TO wolnegbnadysku
  SHELL "echo $(df -m | grep '/' | awk {'print $3'} | head -1)/1000 | bc && echo GB" WAIT TO zajetegb
  SHELL "echo $(df -m | grep '/' | awk {'print $2'} | head -1)/1000 | bc && echo GB" WAIT TO calkowitapoj
  'Progress
  SHELL "df -m | grep / | awk {'print $4'} | head -n 1" WAIT TO wolgb
  SHELL "df -m | grep / | awk {'print $3'} | head -n 1" WAIT TO zajgb
  SHELL "df -m | grep / | awk {'print $2'} | head -n 1" WAIT TO calkowite
  TextLabel1.Text = wolnegbnadysku
  TextArea24.Text = dysktwardy
  TextLabel6.Text = zajetegb
  TextLabel13.Text = calkowitapoj
  ProgressBar2.Value = wolgb / calkowite
  ProgressBar3.Value = zajgb / calkowite
END

PUBLIC SUB bios()
  DIM bios_vendor, bios_version, bios_date, board_name, board_vendor AS String
  
  SHELL "cat /sys/devices/virtual/dmi/id/bios_vendor" TO bios_vendor
  SHELL "cat /sys/devices/virtual/dmi/id/bios_version" TO bios_version
  SHELL "cat /sys/devices/virtual/dmi/id/bios_date" TO bios_date
  SHELL "cat /sys/devices/virtual/dmi/id/board_vendor" TO board_vendor
  SHELL "cat /sys/devices/virtual/dmi/id/board_name" TO board_name

  TextArea25.Text = bios_vendor
  TextArea26.Text = bios_version
  TextArea27.Text = bios_date
  TextArea15.Text = board_vendor
  TextArea16.Text = board_name
END

PUBLIC SUB System()
  DIM hostname, dist, release, arch, gcc, timezone, xorg_version, glx_version AS String
  SHELL "cat /etc/timezone" WAIT TO timezone
  SHELL "hostname" WAIT TO hostname
  SHELL "uname -m" WAIT TO arch
  SHELL "gcc -dumpversion" WAIT TO gcc
  SHELL "xdpyinfo | grep 'X.Org version:' | sed -n '1p' | cut -d ':' -f 2" WAIT TO xorg_version
  SHELL "glxinfo | grep 'GLX version:' | sed -n '1p' | cut -d ':' -f 2" WAIT TO glx_version
  SHELL "echo $SHELL" WAIT TO TextArea48.Text
  distrodetect.distro_detect()
  
  TextArea31.Text = gcc
  TextArea33.Text = hostname
  TextArea36.Text = arch
  TextArea30.Text = timezone
  TextArea34.Text = xorg_version
  TextArea35.Text = glx_version
END

PUBLIC SUB grafika()
  DIM stringa, risultato, gpu, opengl_vendor_string, opengl_renderer_string, opengl_version_string, rozdzielczosc AS String
  DIM righe AS NEW string[]
  DIM count AS Integer
  DIM riga AS NEW String[]
  DIM lista AS NEW String[]
  SHELL "lspci | grep 'VGA' | cut -d ':' -f3 | cut -d '(' -f 1" WAIT TO gpu
  SHELL "glxinfo | grep 'OpenGL vendor string:' | sed -n '1p' | cut -d ':' -f 2" WAIT TO opengl_vendor_string
  SHELL "glxinfo | grep 'OpenGL renderer string:' | sed -n '1p' | cut -d ':' -f 2" WAIT TO opengl_renderer_string
  SHELL "glxinfo | grep 'OpenGL version string:' | sed -n '1p' | cut -d ':' -f 2" WAIT TO opengl_version_string
  SHELL "xdpyinfo | grep 'dimensions:' | cut -d ':' -f 2" WAIT TO rozdzielczosc
  'Zmiana rozdzielczości 
  SHELL "xrandr" TO stringa 
 
  righe = Split(stringa, "\n", "%%", TRUE)  
  
  FOR count = 2 TO righe.Max
     
     riga = Split(righe[count], " ", "%%", TRUE)
     
     risultato = Replace(riga[0], " ", "")
     lista.add(risultato)
  NEXT 
  
  ComboBox2.List = lista
  ComboBox2.Index = 0
  'Koniec zmiany rozdzielczości
  
  TextArea17.Text = gpu
  TextArea19.Text = opengl_vendor_string
  TextArea20.Text = opengl_renderer_string
  TextArea21.Text = opengl_version_string
  TextArea38.Text = rozdzielczosc
  Global.kartagraficzna()
END


PUBLIC SUB internet()
  DIM domyslnaprzegladarka, network_controller, ethernet_controller AS String
  SHELL "x-www-browser -version" WAIT TO domyslnaprzegladarka
  SHELL "lspci | grep 'Network' | cut -d ':' -f 3 | cut -d '(' -f 1" WAIT TO network_controller
  SHELL "lspci | grep 'Ethernet' | cut -d ':' -f 3 | cut -d '(' -f 1" WAIT TO ethernet_controller
  'SHELL "ss -a" WAIT TO ssa
  TextArea46.Text = domyslnaprzegladarka
  TextArea22.Text = network_controller
  TextArea23.Text = ethernet_controller
  'TextArea48.Text = ssa
END


PUBLIC SUB Wykrywanie_procesorow()
  DIM eloaders, eloaders2, eloaders3, obrazekcpu, cpu, vendor_id, flags, cpu_MHz, model, stepping, cpu_family, bogomips, address_sizes, cache_size, ldata, linstruction AS String
  
  IF ComboBox1.Text = "Procesor0" THEN 
     eloaders = "1p"
     eloaders2 = "cpu0"
     eloaders3 = "1p"
  ENDIF
  IF ComboBox1.Text = "Procesor1" THEN 
     eloaders = "2p"
     eloaders2 = "cpu1"
     eloaders3 = "3p"
  ENDIF
  IF ComboBox1.Text = "Procesor2" THEN 
     eloaders = "3p"
     eloaders2 = "cpu2"
     eloaders3 = "5p"
  ENDIF
  IF ComboBox1.Text = "Procesor3" THEN 
     eloaders = "4p"
     eloaders2 = "cpu3"
     eloaders3 = "7p"
  ENDIF
  IF ComboBox1.Text = "Procesor4" THEN 
     eloaders = "5p"
     eloaders2 = "cpu4"
     eloaders3 = "9p"
  ENDIF
  IF ComboBox1.Text = "Procesor5" THEN 
     eloaders = "6p"
     eloaders2 = "cpu5"
     eloaders3 = "11p"
  ENDIF
  IF ComboBox1.Text = "Procesor6" THEN 
     eloaders = "7p"
     eloaders2 = "cpu6"
     eloaders3 = "13p"
  ENDIF
  IF ComboBox1.Text = "Procesor7" THEN 
     eloaders = "8p"
     eloaders2 = "cpu7"
     eloaders3 = "15p"
  ENDIF
  IF ComboBox1.Text = "Procesor8" THEN 
     eloaders = "9p"
     eloaders2 = "cpu8"
     eloaders3 = "17p"
  ENDIF
  IF ComboBox1.Text = "Procesor9" THEN 
     eloaders = "10p"
     eloaders2 = "cpu9"
     eloaders3 = "19p"
  ENDIF
  IF ComboBox1.Text = "Procesor10" THEN 
     eloaders = "11p"
     eloaders2 = "cpu10"
     eloaders3 = "21p"
  ENDIF
  IF ComboBox1.Text = "Procesor11" THEN 
     eloaders = "12p"
     eloaders2 = "cpu11"
     eloaders3 = "23p"
  ENDIF
  
  SHELL "cat /proc/cpuinfo | grep 'vendor_id' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO obrazekcpu
  SHELL "cat /proc/cpuinfo | grep 'model name'| sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO cpu
  SHELL "cat /proc/cpuinfo | grep 'vendor_id' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO vendor_id
  SHELL "cat /proc/cpuinfo | grep 'flags' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO flags
  SHELL "cat /proc/cpuinfo | grep 'cpu MHz' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO cpu_MHz
  SHELL "cat /proc/cpuinfo | grep 'model' | sed -n '" & eloaders3 & "' | cut -d ':' -f 2" WAIT TO model
  SHELL "cat /proc/cpuinfo | grep 'stepping' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO stepping
  SHELL "cat /proc/cpuinfo | grep 'cpu family' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO cpu_family
  SHELL "cat /proc/cpuinfo | grep 'bogomips' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO bogomips
  SHELL "cat /proc/cpuinfo | grep 'address sizes' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO address_sizes
  SHELL "cat /proc/cpuinfo | grep 'cache size' | sed -n '" & eloaders & "' | cut -d ':' -f 2" WAIT TO cache_size
  SHELL "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index0/size" WAIT TO ldata
  SHELL "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index1/size" WAIT TO linstruction
  
  TextArea1.Text = cpu
  TextArea3.Text = flags
  TextArea4.Text = vendor_id
  TextArea5.Text = cpu_MHz
  TextArea7.Text = model
  TextArea8.Text = stepping
  TextArea6.Text = cpu_family
  TextArea9.Text = bogomips
  TextArea10.Text = address_sizes
  TextArea12.Text = cache_size
  TextArea13.Text = ldata
  TextArea11.Text = linstruction
  
  Global.ikonaprocka()

END 

PUBLIC SUB Button2_Click()

  SHELL "gnome-screenshot -w"

END

PUBLIC SUB Button1_Click()

  Finfosys.Close

END

PUBLIC SUB dospam_uptime()
  DIM uptime, total, used, freee, shared, buffers, cached, usedonthistime, swaptotal AS String
  DIM dospam, totpam, totalswap, usedswap AS Float
  SHELL "echo `free -m | grep 'Mem' | awk {'print $2'}` MB" WAIT TO total
  SHELL "echo `free -m | awk {'print $2'} | sed -n '2p'` MB" WAIT TO used
  SHELL "echo `free -m | awk {'print $3'} | sed -n '2p'` MB" WAIT TO freee
  SHELL "echo `free -m | awk {'print $4'} | sed -n '2p'` MB" WAIT TO shared
  SHELL "echo `free -m | awk {'print $5'} | sed -n '2p'` MB" WAIT TO buffers
  SHELL "echo `free -m | awk {'print $6'} | sed -n '2p'` MB" WAIT TO cached
  SHELL "free -m | grep - | awk {'print $3'}" TO dospam
  SHELL "echo `free -m | grep - | awk {'print $3'}` MB" TO usedonthistime
  SHELL "free -m | grep Mem | awk {'print $2'}" WAIT TO totpam
  SHELL "echo `free -m | grep 'Swap:' | awk {'print $2'}` MB" WAIT TO swaptotal
  'Obliczanie zajętości swap
  SHELL "/sbin/swapon -s | awk {'print $3'} | sed -n '2p'" WAIT TO totalswap
  SHELL "/sbin/swapon -s | awk {'print $4'} | sed -n '2p'" WAIT TO usedswap
  TextArea39.Text = total
  TextArea40.Text = used
  TextArea41.Text = freee
  TextArea42.Text = shared
  TextArea43.Text = buffers
  TextArea44.Text = cached
  TextLabel7.Text = usedonthistime
  TextArea45.Text = swaptotal
  TextLabel24.Text = usedswap / 1000
  SHELL "uptime" TO uptime
  TextArea37.Text = uptime
  
  ProgressBar1.Value = dospam / totpam
  ProgressBar4.Value = usedswap / totalswap 

END

PUBLIC SUB Button3_Click()

  About.Show

END

PUBLIC SUB Button5_Click()

  dospam_uptime()

END

PUBLIC SUB Button6_Click()

  dospam_uptime()

END

PUBLIC SUB Button4_Click()

  Desktop.Open("http://www.cpu-world.com/cgi-bin/SearchSite.pl?SEARCH=" & TextArea1.Text & "&PROCESS=Search")

END

PUBLIC SUB Button7_Click()
  DIM dpkg AS String
  SHELL "cat /var/lib/dpkg/status | grep '^Status: install ok installed' | wc -l" WAIT TO dpkg
  TextArea28.Visible = TRUE
  TextLabel21.Visible = TRUE
  TextArea28.Text = dpkg

END

PUBLIC SUB Button8_Click()

  SHELL "xrandr -s " & ComboBox2.Text & "" WAIT
  grafika()

END

PUBLIC SUB Button10_Click()
'sudo apt-get -y remove
  EXEC ["gksu", "apt-get -y remove " & ComboBox3.Text & ""] WAIT
  kernel()
  Message.Warning("Dla poprawności tego działania proszę\nzaktualizuj gruba poleceniem = sudo update-grub")
END
