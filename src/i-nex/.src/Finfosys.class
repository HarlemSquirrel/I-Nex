' Gambas class file

' Copyright(C) 2011-2014, Michał Głowienka aka eloaders <eloaders@linux.pl>
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program. If not, see <http://www.gnu.org/licenses/>.
Private ToolButton[95] As ToolButton
Private Label[95] As Label  ' Dim the array of controls
Private Button[95] As Button
Private TextLabel[95] As TextLabel
Private YESNO As Picture
Public AllowLog As Boolean
Public sLine As String
Public aScan As String[]
Public cpu As String
Public flags As String
Public vendor_id As String
Public Logs As New Logger
Public GDF As String
Public BUFFER As String
Public DATAT As Collection
Public UNAME As Collection
Public USAGE As Collection
Public Sub Form_Open()
  Dim default_display_manager As Boolean = Exist("/etc/X11/default-display-manager")
  Dim cpus As String
  Dim i As Integer
  Dim data As Stream
  Dim MaxCount As Integer
  Dim sLine As String
  Dim MTRR As New String[]
  Shell "ls /sys/devices/system/cpu/ | grep cpu[0-9]" Wait To cpus
  Logs("Starting log", Logger.Info)
  Button4.Visible = False
  Object.Call(MCPUSAGE, "GetUSAGE")
  ''Okno na środku
  ''
  If Settings["Window/X"] = Null Then
     Me.Center
  Else
     Try Me.X = Settings["Window/X", Me.X]
     Try Me.Y = Settings["Window/Y", Me.Y]
     'Try to set Orientation of Tabstrip
     Try TabStrip1.Orientation = Settings["Tab/Pos", TabStrip1.Orientation]
     'If orientation detected then this set size of main window
     Select Case TabStrip1.Orientation
      Case 1
       Logs("TabStrip1.Orientation Left", Logger.Info)
       Orientation_Left_Click()
      Case 2
       Logs("TabStrip1.Orientation Right", Logger.Info)
       Orientation_Right_Click()
      Case 19
       Logs("TabStrip1.Orientation Top", Logger.Info)
       Orientation_Top_Click()
      Case 35
       Logs("TabStrip1.Orientation Bottom", Logger.Info)
       Orientation_Bottom_Click()
     End Select
  Endif
  
  Logs("Check whereis inex-cpuid and get JSON Data", Logger.Info)
      Exec [ChkPrm.ChkExecDir("i-nex-cpuid")] Wait To BUFFER
  Logs("Decode JSON Data", Logger.Info)
      DATAT = JSON.Decode(BUFFER)
  Logs("Add Values CPUID", Logger.Info)
  
      Label92.Text = "" & DATAT["VENDOR_STR"]
      Label193.Text = "" & DATAT["CPU_CODENAME"]
      Label194.Text = "" & DATAT["BRAND_STR"]
      Label195.Text = "Cores:  " & DATAT["NUM_CORES"]
      Label196.Text = "Logical CPUS:  " & DATAT["NUM_LOGICAL_CPUS"]
      Label197.Text = "Total Logical CPUS:  " & DATAT["TOTAL_LOGICAL_CPUS"]
      Label198.Text = "Family:  " & DATAT["FAMILY"]
      Label199.Text = "Model:  " & DATAT["MODEL"]
      Label200.Text = "Stepping:  " & DATAT["STEPPING"]
      Label201.Text = "Ext Family:  " & DATAT["EXT_FAMILY"]
      Label202.Text = "Ext Model:  " & DATAT["EXT_MODEL"]
      Label203.Text = "CPU Clock:  " & DATAT["CPU_CLOCK"]
      Label204.Text = "CPU Clock BY OS:  " & DATAT["CPU_CLOCK_BY_OS"]
      Label205.Text = "CPU Clock BY IC:  " & DATAT["CPU_CLOCK_BY_IC"]
      Label206.Text = "CPU Clock Measure:  " & DATAT["CPU_CLOCK_MEASURE"]
      Label207.Text = "Mark TSC:  " & DATAT["MARK_TSC"]
      Label208.Text = "Mark SYS Clock:  " & DATAT["MARK_SYS_CLOCK"]
      Label209.Text = "L1 Data:  " & DATAT["L1_DATA_CACHE"]
      Label210.Text = "L1 Instr:  " & DATAT["L1_INSTRUCTION_CACHE"]
      Label211.Text = "L2 Cache:  " & DATAT["L2_CACHE"]
      Label212.Text = "L3 Cache:  " & DATAT["L3_CACHE"]
      Label213.Text = "L1 Assoc:  " & DATAT["L1_ASSOC"]
      Label214.Text = "L2 Assoc:  " & DATAT["L2_ASSOC"]
      Label215.Text = "L3 Assoc:  " & DATAT["L3_ASSOC"]
      Label216.Text = "L1 Cacheline:  " & DATAT["L1_CACHELINE"]
      Label217.Text = "L2 Cacheline:  " & DATAT["L2_CACHELINE"]
      Label218.Text = "L3 Cacheline:  " & DATAT["L3_CACHELINE"]
      Label219.Text = "SSE Size:  " & DATAT["SSE_SIZE"]

  Logs("Create Labels ToolButtons TextLabels in ScrollView1", Logger.Info)
  For i = 1 To 94
      Label[i] = New Label(ScrollView1)
      ToolButton[i] = New ToolButton(ScrollView1)
      Button[i] = New Button(ScrollView1) As "Buttongroup"
      TextLabel[i] = New TextLabel(ScrollView1)
                  If DATAT["Flags"][i]["VALUE"] = 1 Then
                     YESNO = Picture["Data/check_true.png"]
                  Else
                     YESNO = Picture["Data/check_false.png"]
                  Endif
                  With Label[i]
                      .X = 2
                      .Y = 215 + Int(i * 20)
                      .Width = 440
                      .Height = 21
                      .Border = Border.Raised
                      .Padding = 3
                      .Font.Size = 8
                      .Tooltip = DATAT["Flags"][i]["NAME"]
                      .Text = DATAT["Flags"][i]["DESC"]
                  End With
                  With ToolButton[i]
                           .X = 420
                           .Y = 215 + Int(i * 20)
                           .Width = 21
                           .Height = 21
                           .Picture = YESNO
                           .Tooltip = DATAT["Flags"][i]["VALUE"]
                  End With
                  With Button[i]
                       .X = 400
                       .Y = 215 + Int(i * 20)
                       .Width = 21
                       .Height = 21
                       .Font.Bold = True
                       .Font.Size = 8
                       .Foreground = 6
                       .Tooltip = "Open Wikipedia page about this processor feature\n" & DATAT["Flags"][i]["WEBSITE"] & ""
                       .Name = DATAT["Flags"][i]["WEBSITE"]
                       .Visible = DATAT["Flags"][i]["HAVEWEBSITE"]
                       .Picture = Picture["AppIcons/applications-internet.png"]
                  End With
                  With TextLabel[i]
                          .X = 320
                          .Y = 215 + Int(i * 20)
                          .Width = 80
                          .Height = 21
                          .Font.Bold = True
                          .Font.Size = 8
                          .Foreground = 6
                          .Alignment = Align.Center
                          .Text = DATAT["Flags"][i]["FEATURE"]
                  End With
  Next

  Try data = Open "/proc/mtrr" For Input

  While Not Eof(data)
        Line Input #data, sLine
        MaxCount += 1
        MTRR.Add(sLine, MaxCount)
  Wend
  
  Try Close #data
  
  If Exist("/proc/mtrr", True) Then
     For i = 1 To MaxCount
         Label[i] = New Label(ScrollView2)
                    With Label[i]
                         .X = 2
                         .Y = Int(i * 20)
                         .Width = 440
                         .Height = 21
                         .Border = Border.Raised
                         .Padding = 3
                         .Font.Size = 8
                         .Text = MTRR[i - 1]
                    End With
    Next
  Endif
  
    'Procesor
  Logs("Check available procesors", Logger.Info)
  Try data = Shell "ls /sys/devices/system/cpu/ | grep cpu[0-9]" For Input

  While Not Eof(data)
        Line Input #data, sLine
        ComboBox1.Add(sLine, MaxCount)
  Wend
  
  If User.Name = "root" Then
    Message.Error(("Running as root is not allowed!\n " & User.Home & ""))
  Endif
  Logs(Settings.Path, Logger.Info)
  Logs(Settings.DefaultDir, Logger.Info)
      Finfosys.TabStrip1[9].Visible = False
      Finfosys.TabStrip1[11].Visible = False
  Logs("Call to MInit for copy nedded files to I-Nex config dir in User.Home", Logger.Info)
      Object.Call(MInit, "_inits")
  Logs("Call to Distribution_Detect", Logger.Info)
      Object.Call(Distribution_Detect, "_inits")
  Logs("Settings default dir = " & Settings.DefaultDir & "", Logger.Info)
      Button14.Visible = ChkPrm.ChkExec("udisks")
  Logs("Check for Battery", Logger.Info)
      Object.Call(battery, "_inits")
  Logs("Check for Usb device plugged", Logger.Info)
      Object.Call(USB_Drives, "_inits")
  Logs("Check for Drives", Logger.Info)
      Object.Call(Disk_Drives, "_inits")
  Logs("Check for Drives..", Logger.Info)
      Object.Call(Disk_Drives, "_init_2")
  Logs("Check for Drives....", Logger.Info)
      Object.Call(Disk_Drives, "get_informations")
  Logs("Check for Input Drives", Logger.Info)
      Object.Call(Input_Devices, "_inits")
  Logs("Check available network devices", Logger.Info)
      Object.Call(nets, "inits")
  Logs("Check available graphic DSub, DVI etc", Logger.Info)
      Object.Call(FGraphic, "_inits")
  Logs("Call to Graphic", Logger.Info)
      Object.Call(FGraphic, "_check")
  Logs("Check sound cards", Logger.Info)
      Object.Call(Asound_Drives, "_inits")
  Logs("Check for default display manager", Logger.Info)
  If default_display_manager = True Then
     Label4.Visible = True
     Label143.Visible = True
     Label143.Text = File.Load("/etc/X11/default-display-manager")
     Label143.Text = "Deafult DM: " & Replace(Label143.Text, "\n", "")
     Logs("Default display manager is " & Label143.Text, Logger.Info)
  Endif
  'Check temperature. If temterature is OK then timer start 1500/ms. Check temp 1500/ms
  Timer1.Start
  TextLabel21.Visible = False

'Uruchomienie instrukcji dla poszczególnych zakładek w celu wydobycia informacji z systemu
 Logs("Check Dospam uptime", Logger.Info)
 dospam_uptime()
 Logs("Check System", Logger.Info)
 System()
 Logs("Check Bios", Logger.Info)
 bios()
 Logs("Check Kernels", Logger.Info)
 kernel()
 Logs("Check graphic card", Logger.Info)
 grafika()
 ''END Uruchomienie instrukcji dla poszczególnych zakładek w celu wydobycia informacji z systemu
 Logs("Set Combobox to cpu0", Logger.Info)
 ComboBox1.Text = "cpu0" ''Ustawienie combobox na Procesor0 / W przeciwnym wypadku nie pokaże nic
 
 Label25.Text = Application.version
 Logs(Label25.Text, Logger.Info)
 TabStrip1_Click()
End

Public Sub ComboBox1_Click()
  Logs("Checking procesors", Logger.Info)
  Wykrywanie_procesorow()

End

Public Sub kernel()
  Dim found_kernels, All_Kernels, for_add, Kernel_command_line As String
  Dim kernels, i As Integer
  Dim UNAME_DATA As String
  Try Exec ["/usr/bin/i-nex-uname"] Wait To UNAME_DATA
  Try UNAME = JSON.Decode(UNAME_DATA)
  Shell "ls /boot | grep 'vmlinuz*' | wc -l" Wait To All_Kernels
  kernels = Replace(Replace(All_Kernels, " ", ""), "\n", "")
  
  For i = 1 To kernels
   Shell "ls /boot | grep 'vmlinuz*' | cut -d '/' -f 3 | sed -n '" & i & "p'" Wait To for_add
   for_add = Replace(Replace(for_add, " ", ""), "\n", "")
   ListBox1.Add(for_add, i)
  Next
  
  Shell "ls /boot/vmlinuz* | cut -d '/' -f 3 | wc -l" Wait To found_kernels
  Shell "cat /proc/cmdline" Wait To Kernel_command_line
  
  Label228.Text = "Installed Kernels: " & found_kernels
  Try TextLabel7.Text = "System name:  " & UNAME["System_name"]
  Try TextLabel16.Text = "Nodename:    " & UNAME["Nodename"]
  Try TextLabel17.Text = "Release:     " & UNAME["Release"]
  Try TextLabel18.Text = "Version:     " & UNAME["Version"]
  Try TextLabel26.Text = "Machine:     " & UNAME["Machine"]
  TextArea3.Text = Kernel_command_line
End

Public Sub bios()
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_vendor"] Wait To TextBox2.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_version"] Wait To TextBox3.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_name"] Wait To TextBox4.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_asset_tag"] Wait To TextBox5.Text
  
  Exec ["cat", "/sys/devices/virtual/dmi/id/bios_vendor"] Wait To TextBox6.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/bios_version"] Wait To TextBox21.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/bios_date"] Wait To TextBox22.Text
  
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_vendor"] Wait To TextBox23.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_version"] Wait To TextBox24.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_type"] Wait To TextBox25.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_asset_tag"] Wait To TextBox26.Text
  
  Exec ["cat", "/sys/devices/virtual/dmi/id/product_name"] Wait To TextBox27.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/product_version"] Wait To TextBox28.Text
  TextBox2.Text = "Board Vendor:   " & Replace(TextBox2.Text, "\n", "")
  TextBox3.Text = "Board Version:   " & Replace(TextBox3.Text, "\n", "")
  TextBox4.Text = "Board Name:   " & Replace(TextBox4.Text, "\n", "")
  TextBox5.Text = "Board Asset Tag:  " & Replace(TextBox5.Text, "\n", "")
  
  TextBox6.Text = "Bios Vendor:   " & Replace(TextBox6.Text, "\n", "")
  TextBox21.Text = "Bios Version:   " & Replace(TextBox21.Text, "\n", "")
  TextBox22.Text = "Bios Date:   " & Replace(TextBox22.Text, "\n", "")
  
  TextBox23.Text = "Chassis Vendor:   " & Replace(TextBox23.Text, "\n", "")
  TextBox24.Text = "Chassis Version:   " & Replace(TextBox24.Text, "\n", "")
  TextBox25.Text = "Chassis Type:   " & Replace(TextBox25.Text, "\n", "")
  TextBox26.Text = "Chassis Asset Tag:   " & Replace(TextBox26.Text, "\n", "")
  
  TextBox27.Text = "Product Name:   " & Replace(TextBox27.Text, "\n", "")
  TextBox28.Text = "Product Version:   " & Replace(TextBox28.Text, "\n", "")
End

Public Sub System()
  Dim hostname, arch, gcc, timezone, xorg_version, glx_version As String
  Shell "cat /etc/timezone || grep ^TIMEZONE= /etc/sysconfig/clock | cut -d '=' -f 2" Wait To timezone
  If timezone = Null Or "" Then
    Shell "timedatectl status | grep Timezone: |awk '{print $2}'" Wait To timezone
  Endif
  For Each sLine In Split(File.Load("/proc/self/maps"), "\n")
      If InStr(sLine, "[heap]") Then
        aScan = Scan(sLine, "*-* *")
        Label176.Text = "Heap size is " & Format(Val("&H" & aScan[1] & "&") - Val("&H" & aScan[0] & "&"), "#,##0") & " bytes."
        Break
      Endif
  Next
  hostname = System.Host
  arch = System.Architecture
  Shell "gcc -dumpversion" Wait To gcc
  Shell "cat /var/log/Xorg.0.log | grep 'X.Org X Server' | awk {'print $4'}" Wait To xorg_version
  Shell "glxinfo | grep 'GLX version:' | sed -n '1p' | cut -d ':' -f 2" Wait To glx_version
  'Shell "echo $SHELL" Wait To TextBox67.Text
  Label135.Text = "System SHELL: " & System.Shell
  Label137.Text = "GCC Version: " & Replace(gcc, "\n", "")
  Label138.Text = "Hostname: " & Replace(hostname, "\n", "")
  Label139.Text = "Arch: " & Replace(arch, "\n", "")
  Label140.Text = "Timezone: " & Replace(timezone, "\n", "")
  Label141.Text = "X.Org Version: " & Replace(xorg_version, "\n", "")
  Label142.Text = "GLX Version: " & Replace(glx_version, "\n", "")
  Distribution_Detect._inits
  Label4.Text = "Distro Vendor: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/DistributionVendor.conf"), "\n", ""), " ", ""), "\n", "")
  Label135.Text = "Distro Release: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/DistributionRelease.conf"), "\n", ""), " ", ""), "\n", "")
  Label144.Text = Replace(File.Load("" & User.Home & "/.i-nex/Binutils.conf"), "\n", "")
  Label145.Text = "Linux C Library: " & Replace(File.Load("" & User.Home & "/.i-nex/Lnxclib.conf"), "\n", "")
  Label37.Text = "Desktop environment: " & Replace(File.Load("" & User.Home & "/.i-nex/DE.conf"), "\n", "")
  Label60.Text = "Window manager: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/WM.conf"), "\n", ""), " ", ""), "\n", "")
  Label61.Text = "Window manager Theme: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/Win_theme.conf"), "\n", ""), " ", ""), "\n", "")
  Label62.Text = "GTK+ 2 Theme: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtk2Theme.conf"), "\n", ""), " ", ""), "\n", "")
  Label63.Text = "GTK+ 3 Theme: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtk3Theme.conf"), "\n", ""), " ", ""), "\n", "")
  Label147.Text = "GTK Font: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtkFont.conf"), "\n", ""), " ", ""), "\n", "")
  Label148.Text = "GTK Icons: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtkIcons.conf"), "\n", ""), " ", ""), "\n", "")
  Label149.Text = "GNU Make Version: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/GNUMAKE.conf"), "\n", ""), " ", ""), "\n", "")
  Label150.Text = "PPP: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/PPP.conf"), "\n", ""), " ", ""), "\n", "")
  Label151.Text = "Dynamic linker (ldd): " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/DYNAMIC_LINKER.conf"), "\n", ""), " ", ""), "\n", "")
  Label152.Text = "Net-tools: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/NETTOOLS.conf"), "\n", ""), " ", ""), "\n", "")
  Label153.Text = "Wireless-tools: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/WIRELESS_TOOLS.conf"), "\n", ""), " ", ""), "\n", "")
' DE.conf
' WM.conf
' Win_theme.conf
' gtk2Theme.conf
' gtk3Theme.conf
' gtkFont.conf
' gtkIcons.conf


End

Public Sub grafika()
  Dim available_resolutions, Kernel_driver_in_use As String
  Dim rozdzielczosc, gpu, memory_prefetchable, memory_non_prefetchable As String
  Dim GL As String
  Dim GLX_GFX As Collection

  Try Exec ["/usr/bin/i-nex-glinfo"] Wait To GL
  Try GLX_GFX = JSON.Decode(GL)
  Try Label105.Text = "OpenGL Vendor: " & GLX_GFX["GL_VENDOR"]
  Try Label106.Text = "OpenGL Renderer: " & GLX_GFX["GL_RENDERER"]
  Try Label107.Text = "OpenGL Version: " & GLX_GFX["GL_VERSION"]
  Try Label220.Text = "Server glx vendor: " & GLX_GFX["SERVER_GLX_VENDOR"]
  Try Label221.Text = "Server glx version: " & GLX_GFX["SERVER_GLX_VERSION"]
  Try Label222.Text = "Client glx vendor: " & GLX_GFX["CLIENT_GLX_VENDOR"]
  Try Label224.Text = "Client glx version: " & GLX_GFX["CLIENT_GLX_VERSION"]
  Try Label225.Text = "GLX version: " & GLX_GFX["GLX_VERSION"]

  Shell "" & ChkPrm.ChkExecDir("lspci") & " -v -s `lspci | awk '/VGA/{print $1}'` | grep 'Kernel driver in use:' | cut -d ':' -f 2" Wait To Kernel_driver_in_use
  Shell "" & ChkPrm.ChkExecDir("lspci") & " | grep 'VGA' | cut -d ':' -f3 | cut -d '(' -f 1" Wait To gpu
  Shell "xdpyinfo | grep 'dimensions:' | cut -d ':' -f 2" Wait To rozdzielczosc
  
  Exec ["/bin/bash", "/usr/bin/i-nex-lspci", "nonprefetchable"] Wait To memory_non_prefetchable
  Exec ["/bin/bash", "/usr/bin/i-nex-lspci", "prefetchable"] Wait To memory_prefetchable
  
  'Rozdzielczość
  If ChkPrm.ChkExec("xrandr") = True Then
    Shell "xrandr | grep current | grep 'Screen 0:' | cut -d ':' -f 2" Wait To available_resolutions
    ''Koniec sprawdzenia dostępnych rozdzielczości.
    ''Sprawdzane są tylko rozdzielczości dla Screen 0.
    ''W przyszłości trzeba będzie dać Combobox w którym będzie do wyboru Creen 0, Screen 1 itd.
  Else
    Message.Warning("Not found xrandr")
  Endif
  Label136.Text = "Kernel driver in use: " & Replace(Kernel_driver_in_use, "\n", "")
  Label64.Text = "Total Memory prefetchable: " & Replace(memory_prefetchable, "\n", " - ")
  Label146.Text = "Total Memory non-prefetchable: " & Replace(memory_non_prefetchable, "\n", " - ")
  Label108.Text = "Present resolution: " & Replace(rozdzielczosc, "\n", "")
  TextBox1.Text = RTrim(Replace(gpu, "\n", ""))
  Label109.Text = Replace(available_resolutions, "\n", "")
  Global.kartagraficzna()
  ComboBox8.Index = 1
End

Public Sub Wykrywanie_procesorow()
  Dim obrazekcpu, cpu_MHz, power_management As String
  Dim model, stepping, cpu_family, bogomips As String
  Dim address_sizes, cache_size, ldata, linstruction As String
  Dim physical_id, cpu_cores, level3cache As String
  Shell "grep 'vendor_id' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To obrazekcpu
  Shell "grep 'model name' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2 | cut -d '@' -f 1" Wait To cpu
  Shell "grep 'vendor_id' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To vendor_id
  Shell "grep 'flags' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To flags
  Shell "grep 'cpu MHz' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To cpu_MHz
  Shell "grep 'model' /proc/cpuinfo | sed -n '" & CFloat(CFloat(CFloat((ComboBox1.Index) + 1) * 2) - 1) & "p' | cut -d ':' -f 2" Wait To model
  Shell "grep 'stepping' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To stepping
  Shell "grep 'cpu family' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To cpu_family
  Shell "grep 'bogomips' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To bogomips
  Shell "grep 'address sizes' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To address_sizes
  Shell "cat /sys/devices/system/cpu/" & Subst(ComboBox1.Current.Text) & "/cache/index2/size" Wait To cache_size
  Shell "cat /sys/devices/system/cpu/" & Subst(ComboBox1.Current.Text) & "/cache/index0/size" Wait To ldata
  Shell "cat /sys/devices/system/cpu/" & Subst(ComboBox1.Current.Text) & "/cache/index1/size" Wait To linstruction
  Shell "cat /sys/devices/system/cpu/" & Subst(ComboBox1.Current.Text) & "/cache/index3/size" Wait To level3cache
  Shell "grep 'siblings' /proc/cpuinfo | sed -n '1p' | cut -d ':' -f 2" Wait To cpu_cores
  Shell "grep 'physical id' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To physical_id
  Shell "grep 'power management' /proc/cpuinfo | sed -n '" & CFloat(ComboBox1.Index + 1) & "p' | cut -d ':' -f 2" Wait To power_management
  Label14.Text = Replace(cpu, "\n", "")
  Label14.Tooltip = Replace(cpu, "\n", "")
  flags = Replace(flags, "\n", "")
  'FFlags._init
  Label71.Text = "Flags: " & FFlags.instructions
  Label13.Text = UCase$(Replace(Replace(Replace(vendor_id, "Authentic", ""), "Genuine", ""), "\n", ""))
  Label12.Text = Replace(cpu_MHz, "\n", "") & " MHz"
  Label1.Text = "L1 Data:        " & Replace(ldata, "\n", "")
  Label2.Text = "L1 instruction: " & Replace(linstruction, "\n", "")
  Label3.Text = "Level 2:        " & Replace(cache_size, "\n", "")
  Label5.Text = "Level 3:        " & Replace(level3cache, "\n", "")
  Label97.Text = "Family: " & Replace(cpu_family, "\n", "")
  Label6.Text = "Model: " & Replace(model, "\n", "")
  Label7.Text = "Stepping: " & Replace(stepping, "\n", "")
  Label8.Text = "Cores: " & Replace(cpu_cores, "\n", "")
  Label19.Text = "Phy id: " & Replace(physical_id, "\n", "")
  Label10.Text = "Bogomips: " & Replace(bogomips, "\n", "")
  Label11.Text = "Address sizes: " & Replace(address_sizes, "\n", "")
  Label15.Text = "Power mangament: " & Replace(power_management, "\n", "")
  Global.ikonaprocka()
  Logs("Get info from database", Logger.Info)
  Object.Call(FCpudb, "_inits")
End

Public Sub Button2_Click()
   ScreenShotM.pic = Desktop.Screenshot(Me.X, Me.Y, Me.W + 12, Me.H + 30)
   ScreenShot.Show
End

Public Sub dospam_uptime()
  Dim Users As String
  Dim USAGE_BUFFER As String
  Shell "users | tr ' ' '\n' | wc -l" Wait To Users
  Exec [ChkPrm.ChkExecDir("i-nex-usage")] Wait To USAGE_BUFFER
  USAGE = JSON.Decode(USAGE_BUFFER)
  
  Label85.Text = "Total:   " & 
                 Int(USAGE["MEMORY_TOTAL"]) & 
                 " MB"
  Label86.Text = "Used:   " & 
                 Int(USAGE["MEMORY_USED"]) & 
                 " MB"
  Label87.Text = "Free:   " & 
                 Int(USAGE["MEMORY_FREE"]) & 
                 " MB"
  Label88.Text = "Shared:   " & 
                 Int(USAGE["MEMORY_SHARED"]) & 
                 " MB"
  Label89.Text = "Buffers:   " & 
                 Int(USAGE["MEMORY_BUFFERS"]) & 
                 " MB"
  Label90.Text = "Cached:   " & 
                 Int(USAGE["MEMORY_CACHED"]) & 
                 " MB"
  Label223.Text = "Ram used: " & 
                 Int(USAGE["USED_PLUS_CACHED"]) & 
                 " MB"
  Label91.Text = "SWAP Total: " & 
                 Int(USAGE["SWAP_TOTAL"]) & 
                 " MB "
  TextLabel15.Text = "Physical Memory Used: " & 
                 Int(USAGE["PHYS_MEM_USED"]) & 
                " MB "
  TextLabel24.Text = "SWAP memory used: " & 
                 Int(USAGE["SWAP_USED"]) & 
                 " MB"
  
  TextBox58.Text = "Days: " & USAGE["UPTIME_DAYS"] & 
                   " " &
                   "Hours: " & USAGE["UPTIME_HOURS"] & 
                   " " &
                   "Minutes: " & USAGE["UPTIME_MINUTES"] & 
                   " " &
                   "Seconds: " & USAGE["UPTIME_SECONDS"] & 
                   " " &
                   "Users: " & Subst$(Users) &
                   "load average: " & Int(USAGE["LOAD_AVG_1MIN"]) & " " &
                   ", " & Int(USAGE["LOAD_AVG_5MIN"]) & " " &
                   ", " & Int(USAGE["LOAD_AVG_15MIN"])
  
  Try ProgressBar6.Value = Int(USAGE["PHYS_MEM_USED"]) / Int(USAGE["TOTAL_VIRTUAL_MEM"])
  Try ProgressBar1.Value = Int(USAGE["USED_PLUS_CACHED"]) / Int(USAGE["MEMORY_TOTAL"])
  Try ProgressBar4.Value = Int(USAGE["SWAP_USED"]) / Int(USAGE["SWAP_TOTAL"])
  
End

Public Sub battery_info()
 Logs("Get information Active Battery", Logger.Info)
 TextBox7.Text = battery.Present
 TextBox8.Text = battery.Design_capacity
 TextBox9.Text = battery.last_full_capacity
 TextBox10.Text = battery.battery_technology
 TextBox11.Text = battery.design_voltage
 TextBox12.Text = battery.design_capacity_warning
 TextBox13.Text = battery.design_capacity_low
 TextBox14.Text = battery.cycle_count
 TextBox15.Text = battery.capacity_granularity_1
 TextBox16.Text = battery.capacity_granularity_2
 TextBox17.Text = battery.model_number
 TextBox18.Text = battery.serial_number
 TextBox19.Text = battery.battery_type
 TextBox20.Text = battery.OEM_info
 
 Logs("Get information Active Battery Done", Logger.Info)
 If Exist("/sys/class/power_supply/BAT1/", True) Then
 Label177.Text = "Alarm:  " & battery.alarm
 Label178.Text = "Capacity:  " & battery.capacity
 Label179.Text = "Charge full:  " & battery.charge_full
 Label180.Text = "Charge full design:  " & battery.charge_full_design
 Label181.Text = "Charge now:  " & battery.charge_now
 Label182.Text = "Current now:  " & battery.current_now
 Label183.Text = "Cycle count:  " & battery.cycle_count
 Label184.Text = "Manufacturer:  " & battery.manufacturer
 Label185.Text = "Model name:  " & battery.model_name
 Label186.Text = "Present:  " & battery.Present
 Label187.Text = "Serial number:  " & battery.serial_number
 Label188.Text = "Status:  " & battery.status
 Label189.Text = "Technology:  " & battery.technology
 Label190.Text = "Battery type:  " & battery.battery_type
 Label191.Text = "Voltage min design:  " & battery.voltage_min_design
 Label192.Text = "Voltage now:  " & battery.voltage_now
 Endif
 
End


Public Sub Button3_Click()
  Logs("Show About Window", Logger.Info)
  About.Show

End

Public Sub Button7_Click()
  Dim dpkg As String
  Dim rpm As String
  Dim pkg As String
  Shell "grep '^Status: install ok installed' /var/lib/dpkg/status | wc -l" Wait To dpkg
  Shell "rpm -qa | wc -l" Wait To rpm
  Shell "pacman -Q|wc -l" Wait To pkg
  TextLabel21.Visible = True
  TextLabel21.Text = "" & dpkg & " deb, " & rpm & " rpm, " & pkg & "pkg, Packages are installed "
End

Public Sub Button10_Click()

 Object.Call(battery, "_inits")
 Logs("Battery initial", Logger.Info)
End

Public Sub ComboBox3_Click()
Disk_Drives.get_informations()
refreshing()
End

Public Sub ComboBox4_Click()

 Disk_Drives._init_2()
 Disk_Drives.get_informations()
 refreshing()
End

Public Sub refreshing()
 
 Label16.Text = "Device model: " & Disk_Drives.device_model & ""
 Label17.Text = "Device vendor: " & Disk_Drives.device_vendor & ""
 Label38.Text = "Device real size: " & Disk_Drives.real_size & ""
 Label39.Text = "Filesystem type: " & Disk_Drives.filesystem_type & ""
 Label41.Text = "Device rev: " & Disk_Drives.device_rev & ""
 Label42.Text = "Max sectors: " & Disk_Drives.max_sectors & ""
 Label43.Text = "State: " & Disk_Drives.device_state & ""
 Label44.Text = "Modalias: " & Disk_Drives.modalias & ""
 Label46.Text = "Ext range: " & Disk_Drives.ext_range & ""
 Label47.Text = "Range: " & Disk_Drives.range & ""
 Label49.Text = "Add random: " & Disk_Drives.add_random & ""
 Label50.Text = "Discard granularity: " & Disk_Drives.discard_granularity & ""
 Label51.Text = "Discard max bytes: " & Disk_Drives.discard_max_bytes & ""
 Label52.Text = "Discard zeroes data: " & Disk_Drives.discard_zeroes_data & ""
 Label53.Text = "HW sector size: " & Disk_Drives.hw_sector_size & ""
 Label54.Text = "Max HW sectors kb: " & Disk_Drives.max_hw_sectors_kb & ""
 Label55.Text = "Max sectors kb: " & Disk_Drives.max_sectors_kb & ""
 Label56.Text = "Max segments: " & Disk_Drives.max_segments & ""
 Label57.Text = "Max segment size: " & Disk_Drives.max_segment_size & ""
 Label58.Text = "Read ahead kb: " & Disk_Drives.read_ahead_kb & ""
 Label59.Text = "Scheduler: " & Disk_Drives.scheduler & ""
 
Label126.Text = "Logical block size: " & Disk_Drives.logical_block_size & "" ' logical_block_size
Label127.Text = "IO stats: " & Disk_Drives.iostats & "" ' iostats
Label128.Text = "Minimum IO size: " & Disk_Drives.minimum_io_size & "" ' minimum_io_size
Label129.Text = "Nomerges: " & Disk_Drives.nomerges & "" ' nomerges
Label130.Text = "Nr requests: " & Disk_Drives.nr_requests & "" ' nr_requests
Label131.Text = "Optimal IO size: " & Disk_Drives.optimal_io_size & "" ' optimal_io_size
Label132.Text = "Physical block size: " & Disk_Drives.physical_block_size & "" ' physical_block_size
Label133.Text = "Rotational: " & Disk_Drives.rotational & "" ' rotational
Label134.Text = "Rq affinity: " & Disk_Drives.rq_affinity & "" ' rq_affinity
 
 Label123.Text = "BDI max_ratio: " & Disk_Drives.max_ratio & "" 
 Label124.Text = "BDI min_ratio: " & Disk_Drives.min_ratio & "" 
 Label125.Text = "BDI stable pages required: " & Disk_Drives.stable_pages_required & "" 
 
 If Disk_Drives.removable Like "0" Then
 Label45.Text = "Removable: No"
 Endif
 If Disk_Drives.removable Like "1" Then
 Label45.Text = "Removable: Yes"
 Endif
 If Disk_Drives.Used <> 0 Then
 Try ProgressBar2.Value = Disk_Drives.Used / 100
 ProgressBar2.ToolTip = Disk_Drives.Used & "%"
 Endif
 If Disk_Drives.Used = Null Then
 ProgressBar2.Value = 0
 ProgressBar2.ToolTip = "Unknown"
 Endif
 If Disk_Drives.check_swap Like "" & ComboBox3.Text & "" Then
 Label48.Visible = True
 Else
 Label48.Visible = False
 Endif
 
 TextBox48.Text = Disk_Drives.mount_point
 TextBox52.Text = Disk_Drives.device_uuid
 TextBox53.Text = Disk_Drives.mount_widtch
End

Public Sub ComboBox5_Click()

 USB_Drives.get_informations()

End

Public Sub ComboBox6_Click()

 Asound_Drives._get_informations()

End

Public Sub ComboBox7_Click()

 Input_Devices._get_informations()

End

Public Sub Button12_Click()

 FReport_Gen.Show

End

Public Sub Timer1_Timer()
  ''Refresh temp 1500/ms
  dospam_uptime()
  thermal_zone._inits
  If thermal_zone.supporttemp = True Then
   'Label93.Text = "Temp: " & (thermal_zone.calculate / 1000) & " °C"
   LCDLabel1.Text = "Temp: " & (thermal_zone.calculate / 1000) & " °C"
   LCDLabel1.Text = Replace(LCDLabel1.Text, ".", " . ")
  Else
   'Label93.Visible = False
    LCDLabel1.Visible = False
  Endif
  
End

Public Sub Button6_Click()

 FModules.Show

End

Public Sub Button13_Click()

 Desktop.Open("http://i-nex.linux.pl/board/")
 Logs("Reporting bug to http://tuxportal.pl/forum/", Logger.Info)

End

Public Sub ComboBox2_Click()
 nets.get_informations_about_net_interface()
 TextBox56.Text = nets.subsystem_device
 TextBox57.Text = nets.subsystem_vendor
 TextArea4.Text = nets.lspci
End

Public Sub Button8_Click()

 FDF.Show

End

Public Sub Button9_Click()

 FNET_R_T.Show

End

Public Sub ComboBox8_Click()

 Object.Call(FGraphic, "_check")

End

Public Sub Button14_Click()

 FUdisks.Show

End

Public Sub Button15_Click()

 Clipboard.Copy(TextBox58.Text)

End

Public Sub Orientation_Top_Click()
 
 TabStrip1.Orientation = Align.Top
 Me.W = Int(Label25.X + 365)
 TabStrip1.W = Int(Label25.X + 365)
 Button1.X = Int(Label25.X + 300)
End

Public Sub Orientation_Bottom_Click()
 
 TabStrip1.Orientation = Align.Bottom
 Me.W = Int(Label25.X + 365)
 TabStrip1.W = Int(Label25.X + 365)
 Button1.X = Int(Label25.X + 300)
End

Public Sub Orientation_Left_Click()
 
 TabStrip1.Orientation = Align.Left
 Me.W = Int(Label25.X + 390)
 TabStrip1.W = Int(Label25.X + 390)
 Button1.X = Int(Label25.X + 325)
 
End

Public Sub Orientation_Right_Click()
 
 TabStrip1.Orientation = Align.Right
 Me.W = Int(Label25.X + 390)
 TabStrip1.W = Int(Label25.X + 390)
 Button1.X = Int(Label25.X + 325)
End

Public Sub Reportthisw_Click()
 Select Case TabStrip1.Current.Text
  Case "CPU"
   FReport_Gen.CheckBox1.Value = True
  Case "GPU"
   FReport_Gen.CheckBox3.Value = True
  Case "Mobo"
   FReport_Gen.CheckBox2.Value = True
  Case "Audio"
   FReport_Gen.CheckBox4.Value = True
  Case "Drives"
   FReport_Gen.CheckBox14.Value = True
  Case "System"
   FReport_Gen.CheckBox5.Value = True
  Case "Kernel"
   FReport_Gen.CheckBox12.Value = True
 End Select
 FReport_Gen.Show
 
End

Public Sub TabStrip1_Click()
TabPanel1_Click()
 If TabStrip1.Current.Text Like "*CPU*" Then
  ComboBox1.Visible = True
 Else
  ComboBox1.Visible = False
 Endif
 If TabStrip1.Current.Text Like "*GPU*" Then
  ComboBox8.Visible = True
  Button11.Visible = True
 Else
  ComboBox8.Visible = False
  Button11.Visible = False
 Endif
 If TabStrip1.Current.Text Like "*Drives*" Then
  HBox19.Visible = True
  Button8.Visible = True
  Button14.Visible = True
 Else
  HBox19.Visible = False
  Button8.Visible = False
  Button14.Visible = False
 Endif
 If TabStrip1.Current.Text Like "*Memory*" And ChkPrm.ChkExec("decode-dimms") = True Then
  HBox19.Visible = False
  Button8.Visible = False
  Button14.Visible = False
  Button4.Visible = True
 Else
  Button4.Visible = False
 Endif
 If TabStrip1.Current.Text Like "*Kernel*" Then
  Button6.Visible = True
 Else
  Button6.Visible = False
 Endif
 Me.Text = "I-Nex / " & TabStrip1.Current.Text 
End

Public Sub Button11_Click()

 FEDID.Show

End

Public Sub Button16_Click()

 TabPanel1.Index = 1

End

Public Sub TabPanel1_Click()

 If TabPanel1.Current.Text = "CPUID" Then
  ComboBox1.Visible = False
 Else If TabPanel1.Current.Text = "CPUINFO" Then
  ComboBox1.Visible = True
 Endif

End
Public Sub Buttongroup_Click()
 Desktop.Open("" & Last.Name & "")
End

Public Sub Button4_Click()

 FDIMM.Show

End

Public Sub ComboBox9_Click()

 Asound_Drives._INPUT_NAME()

End

Public Sub Button1_Click()
  Form_Close()
End

Public Sub Form_Move()
 
 Settings["Window/X"] = Me.X
 Settings["Window/Y"] = Me.Y
 
End

Public Sub Form_Close()
 
  Settings["Window/X"] = Me.X
  Settings["Window/Y"] = Me.Y
  Settings["Tab/Pos"] = TabStrip1.Orientation
  Logs("Good bye!", Logger.Info)
  MCPUSAGE.CPUusage.Kill
  Me.Close
 
End

Public Sub Button17_Click()
 VALIDATE._inits()
 FValidate.Show

End
