' Gambas class file

Public Sub Form_Open()
  Dim gnome_screenshot As Boolean = Exist("/usr/bin/gnome-screenshot")
  Dim default_display_manager As Boolean = Exist("/etc/X11/default-display-manager")
  Dim cpuz0, cpuz1, cpuz2, cpuz3, cpuz4, cpuz5, cpuz6, cpuz7, cpuz8, cpuz9, cpuz10, cpuz11 As String
  Debug "Check Gnome Screenshot"
  If gnome_screenshot = True Then
  Button2.Visible = True
  Debug "Gnome Screenshot Exist = True"
  Endif
  Debug "Check for default display manager"
  If default_display_manager = True Then
   Label4.Visible = True
   TextBox22.Visible = True
   TextBox22.Text = File.Load("/etc/X11/default-display-manager")
   TextBox22.Text = Replace(TextBox22.Text, "\n", "")
   Debug "Default display manager is " & TextBox22.Text
  Endif
  Object.Call(battery, "_init")
  TextLabel21.Visible = False
  'Procesor
  Debug "Check available procesors"
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '1p'" Wait To cpuz0
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '2p'" Wait To cpuz1
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '3p'" Wait To cpuz2
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '4p'" Wait To cpuz3
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '5p'" Wait To cpuz4
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '6p'" Wait To cpuz5
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '7p'" Wait To cpuz6
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '8p'" Wait To cpuz7
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '9p'" Wait To cpuz8
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '10p'" Wait To cpuz9
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '11p'" Wait To cpuz10
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '12p'" Wait To cpuz11
  Debug "Replaces new line to space"
  cpuz0 = Replace(cpuz0, "\n", "")
  cpuz1 = Replace(cpuz1, "\n", "")
  cpuz2 = Replace(cpuz2, "\n", "")
  cpuz3 = Replace(cpuz3, "\n", "")
  cpuz4 = Replace(cpuz4, "\n", "")
  cpuz5 = Replace(cpuz5, "\n", "")
  cpuz6 = Replace(cpuz6, "\n", "")
  cpuz7 = Replace(cpuz7, "\n", "")
  cpuz8 = Replace(cpuz8, "\n", "")
  cpuz9 = Replace(cpuz9, "\n", "")
  cpuz10 = Replace(cpuz10, "\n", "")
  cpuz11 = Replace(cpuz11, "\n", "")

  If (cpuz0 = "cpu0") = True Then
      ComboBox1.Add("Procesor0")
  Endif
     If (cpuz1 = "cpu1") = True Then
         ComboBox1.Add("Procesor1")
     Endif
        If (cpuz2 = "cpu2") = True Then
            ComboBox1.Add("Procesor2")
        Endif
           If (cpuz3 = "cpu3") = True Then
               ComboBox1.Add("Procesor3")
           Endif
              If (cpuz4 = "cpu4") = True Then
                  ComboBox1.Add("Procesor4")
              Endif
                 If (cpuz5 = "cpu5") = True Then
                     ComboBox1.Add("Procesor5")
                 Endif
                 If (cpuz6 = "cpu6") = True Then
                     ComboBox1.Add("Procesor6")
                 Endif
              If (cpuz7 = "cpu7") = True Then
                  ComboBox1.Add("Procesor7")
              Endif
           If (cpuz8 = "cpu8") = True Then
               ComboBox1.Add("Procesor8")
           Endif
        If (cpuz9 = "cpu9") = True Then
            ComboBox1.Add("Procesor9")
        Endif
     If (cpuz10 = "cpu10") = True Then
         ComboBox1.Add("Procesor10")
     Endif
  If (cpuz11 = "cpu11") = True Then
      ComboBox1.Add("Procesor11")
  Endif
'Uruchomienie instrukcji dla poszczególnych zakładek w celu wydobycia informacji z systemu
 Debug "Check Dospam uptime"
 dospam_uptime()
 Debug "Check System"
 System()
 Debug "Check Bios"
 bios()
 Debug "Check Kernels"
 kernel()
 Debug "Check network"
 internet()
 Debug "Check sound cards"
 dzwiek()
 Debug "Check graphic card"
 grafika()
 Debug "Check drives"
 dysk()
 'END Uruchomienie instrukcji dla poszczególnych zakładek w celu wydobycia informacji z systemu
 Debug "Set Combobox to Procesor0"
 ComboBox1.Text = "Procesor0" 'Ustawienie combobox na Procesor0 / W przeciwnym wypadku nie pokaże nic
 Label25.Text = Application.Name & " v: " & Application.version
 Debug Label25.Text
 'Okno na środku
 Me.Center

End
Public Sub rplc()
 
 
 
End


Public Sub ComboBox1_Click()
  Debug "Checking procesors"
  Wykrywanie_procesorow()

End

Public Sub kernel()
  Dim found_kernels, cur_used As String
  Shell "ls /boot/vmlinuz* | cut -d '/' -f 3 " Wait To TextArea47.Text
  Shell "ls /boot/vmlinuz* | cut -d '/' -f 3 | wc -l" Wait To found_kernels
  Shell "uname -r" Wait To cur_used
  TextLabel25.Text = "Found " & found_kernels & " kernels:"
  TextLabel26.Text = "Currently used: " & cur_used & ""
End

Public Sub dzwiek()
  
  Dim kartadzwiekowa, kartadzwiekowa2 As String
  Shell "lspci | grep 'udio' | cut -d ':' -f 3 | cut -d '(' -f 1" Wait To kartadzwiekowa
  TextArea18.Text = kartadzwiekowa

End

Public Sub dysk()
  Dim wolnegbnadysku, dysktwardy, zajetegb, calkowitapoj, zajgb1, wolgb1, calkowite1 As String
  Dim wolgb, zajgb, calkowite As Float
  'SHELL "cat /proc/scsi/scsi | grep ATA | head -1 | cut -d ':' -f 3 | cut -d ' ' -f 2-3 && echo $(cat /proc/partitions | grep sda | head -n 1 | awk {'print $3'})/1024/1024 | bc && echo GB" WAIT TO dysktwardy
  Shell "cat /proc/scsi/scsi" Wait To dysktwardy
  Shell "echo $(df -m | grep '/' | awk {'print $4'} | head -1)/1000 | bc && echo GB" Wait To wolnegbnadysku
  Shell "echo $(df -m | grep '/' | awk {'print $3'} | head -1)/1000 | bc && echo GB" Wait To zajetegb
  Shell "echo $(df -m | grep '/' | awk {'print $2'} | head -1)/1000 | bc && echo GB" Wait To calkowitapoj
  'Progress
  Shell "df -m | grep / | awk {'print $4'} | head -n 1" Wait To wolgb1
  wolgb1 = Replace(wolgb1, "\n", "")
  Shell "df -m | grep / | awk {'print $3'} | head -n 1" Wait To zajgb1
  zajgb1 = Replace(zajgb1, "\n", "")
  Shell "df -m | grep / | awk {'print $2'} | head -n 1" Wait To calkowite1
  calkowite1 = Replace(calkowite1, "\n", "")
  calkowite = calkowite1
  zajgb = zajgb1
  wolgb = wolgb1
  TextLabel1.Text = wolnegbnadysku
  TextArea24.Text = dysktwardy
  TextLabel6.Text = zajetegb
  TextLabel13.Text = calkowitapoj
  ProgressBar2.Value = wolgb / calkowite
  ProgressBar3.Value = zajgb / calkowite
  
End

Public Sub bios()
  Dim bios_vendor, bios_version, bios_date, board_name, board_vendor As String
  
  Shell "cat /sys/devices/virtual/dmi/id/bios_vendor" Wait To bios_vendor
  Shell "cat /sys/devices/virtual/dmi/id/bios_version" Wait To bios_version
  Shell "cat /sys/devices/virtual/dmi/id/bios_date" Wait To bios_date
  Shell "cat /sys/devices/virtual/dmi/id/board_vendor" Wait To board_vendor
  Shell "cat /sys/devices/virtual/dmi/id/board_name" To board_name
  TextArea25.Text = bios_vendor
  TextArea26.Text = bios_version
  TextArea27.Text = bios_date
  TextArea15.Text = board_vendor
  TextArea16.Text = board_name
End

Public Sub System()
  Dim hostname, dist, release, arch, gcc, timezone, xorg_version, glx_version As String
  Shell "cat /etc/timezone" Wait To timezone
  Shell "hostname" Wait To hostname
  Shell "uname -m" Wait To arch
  Shell "gcc -dumpversion" Wait To gcc
  Shell "xdpyinfo | grep 'X.Org version:' | sed -n '1p' | cut -d ':' -f 2" Wait To xorg_version
  Shell "glxinfo | grep 'GLX version:' | sed -n '1p' | cut -d ':' -f 2" Wait To glx_version
  Shell "echo $SHELL" Wait To TextArea48.Text
  distrodetect.distro_detect()
  
  TextArea31.Text = gcc
  TextArea33.Text = hostname
  TextArea36.Text = arch
  TextArea30.Text = timezone
  TextArea34.Text = xorg_version
  TextArea35.Text = glx_version
End

Public Sub grafika()
  Dim stringa, risultato, gpu, opengl_vendor_string, opengl_renderer_string, opengl_version_string, rozdzielczosc As String
  Dim righe As New String[]
  Dim count As Integer
  Dim riga As New String[]
  Dim lista As New String[]
  Shell "lspci | grep 'VGA' | cut -d ':' -f3 | cut -d '(' -f 1" Wait To gpu
  Shell "glxinfo | grep 'OpenGL vendor string:' | sed -n '1p' | cut -d ':' -f 2" Wait To opengl_vendor_string
  Shell "glxinfo | grep 'OpenGL renderer string:' | sed -n '1p' | cut -d ':' -f 2" Wait To opengl_renderer_string
  Shell "glxinfo | grep 'OpenGL version string:' | sed -n '1p' | cut -d ':' -f 2" Wait To opengl_version_string
  Shell "xdpyinfo | grep 'dimensions:' | cut -d ':' -f 2" Wait To rozdzielczosc
  'Zmiana rozdzielczości 
  Shell "xrandr" To stringa
 
  righe = Split(stringa, "\n", "%%", True)
  
  For count = 2 To righe.Max
     
     riga = Split(righe[count], " ", "%%", True)
     
     risultato = Replace(riga[0], " ", "")
     lista.add(risultato)
  Next
  
  ComboBox2.List = lista
  ComboBox2.Index = 0
  'Koniec zmiany rozdzielczości
  
  TextArea17.Text = gpu
  TextArea17.Text = Replace(TextArea17.Text, "\n", "")
  TextArea19.Text = opengl_vendor_string
  TextArea19.Text = Replace(TextArea19.Text, "\n", "")
  TextArea20.Text = opengl_renderer_string
  TextArea20.Text = Replace(TextArea20.Text, "\n", "")
  TextArea21.Text = opengl_version_string
  TextArea21.Text = Replace(TextArea21.Text, "\n", "")
  TextArea38.Text = rozdzielczosc
  TextArea38.Text = Replace(TextArea38.Text, "\n", "")
  Global.kartagraficzna()
End


Public Sub internet()
  Dim default_web_browser, network_controller, ethernet_controller As String
  Shell "x-www-browser -version" Wait To default_web_browser
  Shell "lspci | grep 'Network' | cut -d ':' -f 3 | cut -d '(' -f 1" Wait To network_controller
  Shell "lspci | grep 'Ethernet' | cut -d ':' -f 3 | cut -d '(' -f 1" Wait To ethernet_controller
  'SHELL "ss -a" WAIT TO ssa
  TextArea46.Text = default_web_browser
  TextArea46.Text = Replace(TextArea46.Text, "\n", " ")
  TextArea22.Text = network_controller
  TextArea22.Text = Replace(TextArea22.Text, "\n", " ")
  TextArea23.Text = ethernet_controller
  TextArea23.Text = Replace(TextArea23.Text, "\n", " ")
  'TextArea48.Text = ssa
End


Public Sub Wykrywanie_procesorow()
  Dim eloaders, eloaders2, eloaders3 As String
  Dim obrazekcpu, cpu, vendor_id, flags, cpu_MHz, model, stepping, cpu_family, bogomips, address_sizes, cache_size, ldata, linstruction As String
  Dim physical_id, cpu_cores As String
  
  If ComboBox1.Text = "Procesor0" Then
  eloaders = "1p"
  eloaders2 = "cpu0"
  eloaders3 = "1p"
  Endif
  If ComboBox1.Text = "Procesor1" Then
  eloaders = "2p"
  eloaders2 = "cpu1"
  eloaders3 = "3p"
  Endif
  If ComboBox1.Text = "Procesor2" Then
  eloaders = "3p"
  eloaders2 = "cpu2"
  eloaders3 = "5p"
  Endif
  If ComboBox1.Text = "Procesor3" Then
  eloaders = "4p"
  eloaders2 = "cpu3"
  eloaders3 = "7p"
  Endif
  If ComboBox1.Text = "Procesor4" Then
  eloaders = "5p"
  eloaders2 = "cpu4"
  eloaders3 = "9p"
  Endif
  If ComboBox1.Text = "Procesor5" Then
  eloaders = "6p"
  eloaders2 = "cpu5"
  eloaders3 = "11p"
  Endif
  If ComboBox1.Text = "Procesor6" Then
  eloaders = "7p"
  eloaders2 = "cpu6"
  eloaders3 = "13p"
  Endif
  If ComboBox1.Text = "Procesor7" Then
  eloaders = "8p"
  eloaders2 = "cpu7"
  eloaders3 = "15p"
  Endif
  If ComboBox1.Text = "Procesor8" Then
  eloaders = "9p"
  eloaders2 = "cpu8"
  eloaders3 = "17p"
  Endif
  If ComboBox1.Text = "Procesor9" Then
  eloaders = "10p"
  eloaders2 = "cpu9"
  eloaders3 = "19p"
  Endif
  If ComboBox1.Text = "Procesor10" Then
  eloaders = "11p"
  eloaders2 = "cpu10"
  eloaders3 = "21p"
  Endif
  If ComboBox1.Text = "Procesor11" Then
  eloaders = "12p"
  eloaders2 = "cpu11"
  eloaders3 = "23p"
  Endif
  
  Shell "grep 'vendor_id' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To obrazekcpu
  Shell "grep 'model name' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cpu
  Shell "grep 'vendor_id' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To vendor_id
  Shell "grep 'flags' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To flags
  Shell "grep 'cpu MHz' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cpu_MHz
  Shell "grep 'model' /proc/cpuinfo | sed -n '" & eloaders3 & "' | cut -d ':' -f 2" Wait To model
  Shell "grep 'stepping' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To stepping
  Shell "grep 'cpu family' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cpu_family
  Shell "grep 'bogomips' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To bogomips
  Shell "grep 'address sizes' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To address_sizes
  Shell "grep 'cache size' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cache_size
  Shell "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index0/size" Wait To ldata
  Shell "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index1/size" Wait To linstruction
  Shell "grep 'cpu cores' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cpu_cores
  Shell "grep 'physical id' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To physical_id
  
  TextArea1.Text = cpu
  TextArea1.Text = Replace(TextArea1.Text, "\n", "")
  TextArea3.Text = flags
  TextArea3.Text = Replace(TextArea3.Text, "\n", "")
  TextArea4.Text = vendor_id
  TextArea4.Text = Replace(TextArea4.Text, "\n", "")
  TextArea5.Text = cpu_MHz & " MHz"
  TextArea5.Text = Replace(TextArea5.Text, "\n", "")
  TextBox3.Text = model
  TextBox3.Text = Replace(TextBox3.Text, "\n", "")
  TextBox2.Text = stepping
  TextBox2.Text = Replace(TextBox2.Text, "\n", "")
  TextBox4.Text = cpu_family
  TextBox4.Text = Replace(TextBox4.Text, "\n", "")
  TextBox6.Text = bogomips
  TextBox6.Text = Replace(TextBox6.Text, "\n", "")
  TextArea10.Text = address_sizes
  TextArea10.Text = Replace(TextArea10.Text, "\n", "")
  TextArea12.Text = cache_size
  TextArea12.Text = Replace(TextArea12.Text, "\n", "")
  TextArea13.Text = ldata
  TextArea13.Text = Replace(TextArea13.Text, "\n", "")
  TextArea11.Text = linstruction
  TextArea11.Text = Replace(TextArea11.Text, "\n", "")
  TextBox1.Text = cpu_cores
  TextBox1.Text = Replace(TextBox1.Text, "\n", "")
  TextBox5.Text = physical_id
  TextBox5.Text = Replace(TextBox5.Text, "\n", "")
  Global.ikonaprocka()

End

Public Sub Button2_Click()

  Exec ["gnome-screenshot", "-w"]
  Debug "Running Gnome Screenshot"

End

Public Sub Button1_Click()

  Me.Close
  Debug "God bye!"
End

Public Sub dospam_uptime()
  Dim uptime, total, used, freee, shared, buffers, cached, usedonthistime, swaptotal As String
  Dim dospam, totpam, totalswap, usedswap As Float
  Dim dospam1, totpam1, totalswap1, usedswap1 As String
  Shell "free -m | grep 'Mem' | awk {'print $2'}" Wait To total
  Shell "free -m | awk {'print $3'} | sed -n '2p'" Wait To used
  Shell "free -m | awk {'print $4'} | sed -n '2p'" Wait To freee
  Shell "free -m | awk {'print $5'} | sed -n '2p'" Wait To shared
  Shell "free -m | awk {'print $6'} | sed -n '2p'" Wait To buffers
  Shell "free -m | awk {'print $7'} | sed -n '2p'" Wait To cached
  Shell "free -m | grep - | awk {'print $3'}" To dospam1
  Shell "free -m | grep - | awk {'print $3'}" To usedonthistime
  Shell "free -m | grep Mem | awk {'print $2'}" Wait To totpam1
  Shell "free -m | grep 'Swap:' | awk {'print $2'}" Wait To swaptotal
  'Obliczanie zajętości swap
  Shell "/sbin/swapon -s | awk {'print $3'} | sed -n '2p'" Wait To totalswap1
  Shell "/sbin/swapon -s | awk {'print $4'} | sed -n '2p'" Wait To usedswap1
  
  TextArea39.Text = total & "MB"
  TextArea39.Text = Replace(TextArea39.Text, "\n", "")
  TextArea40.Text = used & "MB"
  TextArea40.Text = Replace(TextArea40.Text, "\n", "")
  TextArea41.Text = freee & "MB"
  TextArea41.Text = Replace(TextArea41.Text, "\n", "")
  TextArea42.Text = shared & "MB"
  TextArea42.Text = Replace(TextArea42.Text, "\n", "")
  TextArea43.Text = buffers & "MB"
  TextArea43.Text = Replace(TextArea43.Text, "\n", "")
  TextArea44.Text = cached & "MB"
  TextArea44.Text = Replace(TextArea44.Text, "\n", "")
  TextLabel7.Text = usedonthistime & "MB"
  TextLabel7.Text = Replace(TextLabel7.Text, "\n", "")
  TextArea45.Text = swaptotal & "MB"
  TextArea45.Text = Replace(TextArea45.Text, "\n", "")
  TextLabel24.Text = usedswap / 1000
  Exec ["uptime"] Wait To uptime
  TextArea37.Text = uptime
  TextArea37.Text = Replace(TextArea37.Text, "\n", "")
  dospam1 = Replace(dospam1, "\n", "")
  totpam1 = Replace(totpam1, "\n", "")
  totalswap1 = Replace(totalswap1, "\n", "")
  usedswap1 = Replace(usedswap1, "\n", "")
  dospam = dospam1
  totpam = totpam1
  totalswap = totalswap1
  usedswap = usedswap1
  ProgressBar1.Value = dospam / totpam
  Try ProgressBar4.Value = usedswap / totalswap

End

Public Sub battery_info()
 Debug "Get information Active Battery"
 TextBox7.Text = battery.Present
 TextBox8.Text = battery.Design_capacity
 TextBox9.Text = battery.last_full_capacity
 TextBox10.Text = battery.battery_technology
 TextBox11.Text = battery.design_voltage
 TextBox12.Text = battery.design_capacity_warning
 TextBox13.Text = battery.design_capacity_low
 TextBox14.Text = battery.cycle_count
 TextBox15.Text = battery.capacity_granularity_1
 TextBox16.Text = battery.capacity_granularity_2
 TextBox17.Text = battery.model_number
 TextBox18.Text = battery.serial_number
 TextBox19.Text = battery.battery_type
 TextBox20.Text = battery.OEM_info
 Debug "Get information Active Battery Done"
 
End


Public Sub Button3_Click()
  Debug "Show About Window"
  About.Show

End

Public Sub Button5_Click()

  dospam_uptime()

End

Public Sub Button6_Click()

  dospam_uptime()

End

Public Sub Button4_Click()

  Desktop.Open("http://www.cpu-world.com/cgi-bin/SearchSite.pl?SEARCH=" & TextArea1.Text & "&PROCESS=Search")
  Debug "Open website for more informations about your processor"
End

Public Sub Button7_Click()
  Dim dpkg As String
  Shell "grep '^Status: install ok installed' /var/lib/dpkg/status | wc -l" Wait To dpkg
  TextLabel21.Visible = True
  TextLabel21.Text = "" & dpkg & " Packages are installed"

End

Public Sub Button8_Click()

  Shell "xrandr -s " & ComboBox2.Text & "" Wait
  grafika()

End

Public Sub Button10_Click()

 Object.Call(battery, "_init")
 Debug "Battery initial"
End

Public Sub Button9_Click()
 'Brightness.Show
 Debug "Show brightness window"
End
