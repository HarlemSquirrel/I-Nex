' Gambas class file

Public AllowLog As Boolean
Public sLine As String
Public aScan As String[]
Public cpu As String
Public flags As String
Public vendor_id As String
Public Logs As New Logger
Public Sub Form_Open()
  Dim default_display_manager As Boolean = Exist("/etc/X11/default-display-manager")
  Dim cpuz0, cpuz1, cpuz2, cpuz3, cpuz4, cpuz5, cpuz6, cpuz7, cpuz8, cpuz9, cpuz10, cpuz11 As String
  If User.Name = "root" Then
    Message.Error(("Running as root is not allowed!\n " & User.Home & ""))
  Endif
  Logs("Starting log", Logger.Info)
  Logs(Settings.Path, Logger.Info)
  Logs(Settings.DefaultDir, Logger.Info)
  Finfosys.TabStrip1[9].Visible = False
  Logs("Call to MInit for copy nedded files to I-Nex config dir in User.Home", Logger.Info)
  Object.Call(MInit, "_inits")
  Logs("Call to Distribution_Detect", Logger.Info)
  Object.Call(Distribution_Detect, "_inits")
  Logs("Settings default dir = " & Settings.DefaultDir & "", Logger.Info)
  Button14.Visible = ChkPrm.ChkExec("udisks")
  Logs("Check for Battery", Logger.Info)
  Object.Call(battery, "_inits")
  Logs("Check for Usb device plugged", Logger.Info)
  Object.Call(USB_Drives, "_inits")
  Logs("Check for Drives", Logger.Info)
  Object.Call(Disk_Drives, "_inits")
  Logs("Check for Drives..", Logger.Info)
  Object.Call(Disk_Drives, "_init_2")
  Logs("Check for Drives....", Logger.Info)
  Object.Call(Disk_Drives, "get_informations")
  Logs("Check for Input Drives", Logger.Info)
  Object.Call(Input_Devices, "_inits")
  Logs("Check available network devices", Logger.Info)
  Object.Call(net, "inits")
  Logs("Check available graphic DSub, DVI etc", Logger.Info)
  Object.Call(FGraphic, "_inits")
  Logs("Call to Graphic", Logger.Info)
  Object.Call(FGraphic, "_check")
  Logs("Check for default display manager", Logger.Info)
  If default_display_manager = True Then
   Label4.Visible = True
   Label143.Visible = True
   Label143.Text = File.Load("/etc/X11/default-display-manager")
   Label143.Text = "Deafult DM: " & Replace(Label143.Text, "\n", "")
   Logs("Default display manager is " & Label143.Text, Logger.Info)
  Endif
  'Check temperature. If temterature is OK then timer start 1500/ms. Check temp 1500/ms
  Timer1.Start
  TextLabel21.Visible = False
  'Procesor
  Logs("Check available procesors", Logger.Info)
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '1p'" Wait To cpuz0
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '2p'" Wait To cpuz1
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '3p'" Wait To cpuz2
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '4p'" Wait To cpuz3
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '5p'" Wait To cpuz4
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '6p'" Wait To cpuz5
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '7p'" Wait To cpuz6
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '8p'" Wait To cpuz7
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '9p'" Wait To cpuz8
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '10p'" Wait To cpuz9
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '11p'" Wait To cpuz10
  Shell "ls /sys/devices/system/cpu/ | grep -v save | sed -n '12p'" Wait To cpuz11
  Logs("Replaces new line to space", Logger.Info)
  cpuz0 = Replace(cpuz0, "\n", "")
  cpuz1 = Replace(cpuz1, "\n", "")
  cpuz2 = Replace(cpuz2, "\n", "")
  cpuz3 = Replace(cpuz3, "\n", "")
  cpuz4 = Replace(cpuz4, "\n", "")
  cpuz5 = Replace(cpuz5, "\n", "")
  cpuz6 = Replace(cpuz6, "\n", "")
  cpuz7 = Replace(cpuz7, "\n", "")
  cpuz8 = Replace(cpuz8, "\n", "")
  cpuz9 = Replace(cpuz9, "\n", "")
  cpuz10 = Replace(cpuz10, "\n", "")
  cpuz11 = Replace(cpuz11, "\n", "")

  If (cpuz0 = "cpu0") = True Then
      ComboBox1.Add("Processor0")
  Endif
     If (cpuz1 = "cpu1") = True Then
         ComboBox1.Add("Processor1")
     Endif
        If (cpuz2 = "cpu2") = True Then
            ComboBox1.Add("Processor2")
        Endif
           If (cpuz3 = "cpu3") = True Then
               ComboBox1.Add("Processor3")
           Endif
              If (cpuz4 = "cpu4") = True Then
                  ComboBox1.Add("Processor4")
              Endif
                 If (cpuz5 = "cpu5") = True Then
                     ComboBox1.Add("Processor5")
                 Endif
                 If (cpuz6 = "cpu6") = True Then
                     ComboBox1.Add("Processor6")
                 Endif
              If (cpuz7 = "cpu7") = True Then
                  ComboBox1.Add("Processor7")
              Endif
           If (cpuz8 = "cpu8") = True Then
               ComboBox1.Add("Processor8")
           Endif
        If (cpuz9 = "cpu9") = True Then
            ComboBox1.Add("Processor9")
        Endif
     If (cpuz10 = "cpu10") = True Then
         ComboBox1.Add("Processor10")
     Endif
  If (cpuz11 = "cpu11") = True Then
      ComboBox1.Add("Processor11")
  Endif
'Uruchomienie instrukcji dla poszczególnych zakładek w celu wydobycia informacji z systemu
 Logs("Check Dospam uptime", Logger.Info)
 dospam_uptime()
 Logs("Check System", Logger.Info)
 System()
 Logs("Check Bios", Logger.Info)
 bios()
 Logs("Check Kernels", Logger.Info)
 kernel()
 Logs("Check sound cards", Logger.Info)
 dzwiek()
 Logs("Check graphic card", Logger.Info)
 grafika()
 ''END Uruchomienie instrukcji dla poszczególnych zakładek w celu wydobycia informacji z systemu
 Logs("Set Combobox to Processor0", Logger.Info)
 ComboBox1.Text = "Processor0" ''Ustawienie combobox na Procesor0 / W przeciwnym wypadku nie pokaże nic
 Label25.Text = Application.Name & " v: " & Application.version
 Logs(Label25.Text, Logger.Info)
 ''Okno na środku
 Me.Center
 Me.X = Settings["Window/X", Me.X]
 Me.Y = Settings["Window/Y", Me.Y]
 
End

Public Sub ComboBox1_Click()
  Logs("Checking procesors", Logger.Info)
  Wykrywanie_procesorow()

End

Public Sub kernel()
  Dim found_kernels, cur_used, All_Kernels, for_add, Kernel_command_line As String
  Dim kernels, i As Integer
  Shell "ls /boot | grep 'vmlinuz*' | wc -l" Wait To All_Kernels
  kernels = Replace(Replace(All_Kernels, " ", ""), "\n", "")
  For i = 1 To kernels
   Shell "ls /boot | grep 'vmlinuz*' | cut -d '/' -f 3 | sed -n '" & i & "p'" Wait To for_add
   for_add = Replace(Replace(for_add, " ", ""), "\n", "")
   ListBox1.Add(for_add, i)
  Next
  Shell "ls /boot/vmlinuz* | cut -d '/' -f 3 | wc -l" Wait To found_kernels
  Shell "uname -r" Wait To cur_used
  Shell "cat /proc/cmdline" Wait To Kernel_command_line
  TextLabel25.Text = "Found " & found_kernels & " kernels:"
  TextLabel26.Text = "Currently used: " & cur_used & ""
  TextArea3.Text = Kernel_command_line
End

Public Sub dzwiek()

  TextArea18.Text = Asound_Drives.sound_cards
  TextBox44.Text = Asound_Drives.Version
  Label18.Text = "Codec:   " & Asound_Drives.Codec
  Label73.Text = "ID:   " & Asound_Drives.Id & "   "
  Label74.Text = "Modules:   " & Asound_Drives.Modules
  Label77.Text = "HWdep:   " & Asound_Drives.hwdep
  Label78.Text = "PCM:   " & Asound_Drives.pcm
  TextArea1.Text = Asound_Drives.Devices

End

Public Sub bios()
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_vendor"] Wait To TextLabel1.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_version"] Wait To TextLabel2.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_name"] Wait To TextLabel3.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/board_asset_tag"] Wait To TextLabel4.Text
  
  Exec ["cat", "/sys/devices/virtual/dmi/id/bios_vendor"] Wait To TextLabel5.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/bios_version"] Wait To TextLabel6.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/bios_date"] Wait To TextLabel7.Text
  
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_vendor"] Wait To TextLabel8.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_version"] Wait To TextLabel9.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_type"] Wait To TextLabel10.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/chassis_asset_tag"] Wait To TextLabel11.Text
  
  Exec ["cat", "/sys/devices/virtual/dmi/id/product_name"] Wait To TextLabel12.Text
  Exec ["cat", "/sys/devices/virtual/dmi/id/product_version"] Wait To TextLabel13.Text
  TextLabel1.Text = "Board Vendor:   " & Replace(TextLabel1.Text, "\n", "")
  TextLabel2.Text = "Board Version:   " & Replace(TextLabel2.Text, "\n", "")
  TextLabel3.Text = "Board Name:   " & Replace(TextLabel3.Text, "\n", "")
  TextLabel4.Text = "Board Asset Tag:  " & Replace(TextLabel4.Text, "\n", "")
  
  TextLabel5.Text = "Bios Vendor:   " & Replace(TextLabel5.Text, "\n", "")
  TextLabel6.Text = "Bios Version:   " & Replace(TextLabel6.Text, "\n", "")
  TextLabel14.Text = "Bios Date:   " & Replace(TextLabel7.Text, "\n", "")
  
  TextLabel8.Text = "Chassis Vendor:   " & Replace(TextLabel8.Text, "\n", "")
  TextLabel9.Text = "Chassis Version:   " & Replace(TextLabel9.Text, "\n", "")
  TextLabel10.Text = "Chassis Type:   " & Replace(TextLabel10.Text, "\n", "")
  TextLabel11.Text = "Chassis Asset Tag:   " & Replace(TextLabel11.Text, "\n", "")
  
  TextLabel12.Text = "Product Name:   " & Replace(TextLabel12.Text, "\n", "")
  TextLabel13.Text = "Product Version:   " & Replace(TextLabel13.Text, "\n", "")
End

Public Sub System()
  Dim hostname, arch, gcc, timezone, xorg_version, glx_version As String
  Shell "cat /etc/timezone || grep ^TIMEZONE= /etc/sysconfig/clock | cut -d '=' -f 2" Wait To timezone
  If timezone = Null Or "" Then
    Shell "timedatectl status | grep Timezone: |awk '{print $2}'" Wait To timezone
  Endif
  For Each sLine In Split(File.Load("/proc/self/maps"), "\n")
      If InStr(sLine, "[heap]") Then
        aScan = Scan(sLine, "*-* *")
        Label176.Text = "Heap size is " & Format(Val("&H" & aScan[1] & "&") - Val("&H" & aScan[0] & "&"), "#,##0") & " bytes."
        Break
      Endif
  Next
  hostname = System.Host
  arch = System.Architecture
  Shell "gcc -dumpversion" Wait To gcc
  Shell "cat /var/log/Xorg.0.log | grep 'X.Org X Server' | awk {'print $4'}" Wait To xorg_version
  Shell "glxinfo | grep 'GLX version:' | sed -n '1p' | cut -d ':' -f 2" Wait To glx_version
  'Shell "echo $SHELL" Wait To TextBox67.Text
  Label135.Text = "System SHELL: " & System.Shell
  Label137.Text = "GCC Version: " & Replace(gcc, "\n", "")
  Label138.Text = "Hostname: " & Replace(hostname, "\n", "")
  Label139.Text = "Arch: " & Replace(arch, "\n", "")
  Label140.Text = "Timezone: " & Replace(timezone, "\n", "")
  Label141.Text = "X.Org Version: " & Replace(xorg_version, "\n", "")
  Label142.Text = "GLX Version: " & Replace(glx_version, "\n", "")
  Distribution_Detect._inits
  Label4.Text = "Distro Vendor: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/DistributionVendor.conf"), "\n", ""), " ", ""), "\n", "")
  Label135.Text = "Distro Release: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/DistributionRelease.conf"), "\n", ""), " ", ""), "\n", "")
  Label144.Text = Replace(File.Load("" & User.Home & "/.i-nex/Binutils.conf"), "\n", "")
  Label145.Text = "Linux C Library: " & Replace(File.Load("" & User.Home & "/.i-nex/Lnxclib.conf"), "\n", "")
  Label37.Text = "Desktop environment: " & Replace(File.Load("" & User.Home & "/.i-nex/DE.conf"), "\n", "")
  Label60.Text = "Window manager: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/WM.conf"), "\n", ""), " ", ""), "\n", "")
  Label61.Text = "Window manager Theme: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/Win_theme.conf"), "\n", ""), " ", ""), "\n", "")
  Label62.Text = "GTK+ 2 Theme: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtk2Theme.conf"), "\n", ""), " ", ""), "\n", "")
  Label63.Text = "GTK+ 3 Theme: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtk3Theme.conf"), "\n", ""), " ", ""), "\n", "")
  Label147.Text = "GTK Font: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtkFont.conf"), "\n", ""), " ", ""), "\n", "")
  Label148.Text = "GTK Icons: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/gtkIcons.conf"), "\n", ""), " ", ""), "\n", "")
  Label149.Text = "GNU Make Version: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/GNUMAKE.conf"), "\n", ""), " ", ""), "\n", "")
  Label150.Text = "PPP: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/PPP.conf"), "\n", ""), " ", ""), "\n", "")
  Label151.Text = "Dynamic linker (ldd): " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/DYNAMIC_LINKER.conf"), "\n", ""), " ", ""), "\n", "")
  Label152.Text = "Net-tools: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/NETTOOLS.conf"), "\n", ""), " ", ""), "\n", "")
  Label153.Text = "Wireless-tools: " & Replace(Replace(Replace(File.Load("" & User.Home & "/.i-nex/WIRELESS_TOOLS.conf"), "\n", ""), " ", ""), "\n", "")
' DE.conf
' WM.conf
' Win_theme.conf
' gtk2Theme.conf
' gtk3Theme.conf
' gtkFont.conf
' gtkIcons.conf


End

Public Sub grafika()
  Dim available_resolutions, Kernel_driver_in_use As String
  Dim rozdzielczosc, gpu, memory_prefetchable, memory_non_prefetchable As String
  Dim opengl_vendor_string, opengl_renderer_string, opengl_version_string As String
  
  If ChkPrm.chkExec("glxinfo") = True Then
    Shell "" & ChkPrm.ChkExecDir("lspci") & " | grep 'VGA' | cut -d ':' -f3 | cut -d '(' -f 1" Wait To gpu
    'lspci -v -s `lspci | awk '/VGA/{print $1}'` | grep 'Kernel driver in use:' | cut -d ':' -f 2
    Shell "" & ChkPrm.ChkExecDir("lspci") & " -v -s `lspci | awk '/VGA/{print $1}'` | grep 'Kernel driver in use:' | cut -d ':' -f 2" Wait To Kernel_driver_in_use
    Shell "glxinfo | grep 'OpenGL vendor string:' | sed -n '1p' | cut -d ':' -f 2" Wait To opengl_vendor_string
    Shell "glxinfo | grep 'OpenGL renderer string:' | sed -n '1p' | cut -d ':' -f 2" Wait To opengl_renderer_string
    Shell "glxinfo | grep 'OpenGL version string:' | sed -n '1p' | cut -d ':' -f 2" Wait To opengl_version_string
  Else
    Message.Warning("Not found glxinfo")
  Endif
  
  Shell "xdpyinfo | grep 'dimensions:' | cut -d ':' -f 2" Wait To rozdzielczosc
  Exec ["/bin/bash", "/usr/bin/i-nex-lspci", "nonprefetchable"] Wait To memory_non_prefetchable
  Exec ["/bin/bash", "/usr/bin/i-nex-lspci", "prefetchable"] Wait To memory_prefetchable
  
  'Rozdzielczość
  If ChkPrm.ChkExec("xrandr") = True Then
    Shell "xrandr | grep current | grep 'Screen 0:' | cut -d ':' -f 2" Wait To available_resolutions
    ''Koniec sprawdzenia dostępnych rozdzielczości.
    ''Sprawdzane są tylko rozdzielczości dla Screen 0.
    ''W przyszłości trzeba będzie dać Combobox w którym będzie do wyboru Creen 0, Screen 1 itd.
  Else
    Message.Warning("Not found xrandr")
  Endif
  Label136.Text = "Kernel driver in use: " & Replace(Kernel_driver_in_use, "\n", "")
  Label64.Text = "Total Memory prefetchable: " & Replace(memory_prefetchable, "\n", " - ")
  Label146.Text = "Total Memory non-prefetchable: " & Replace(memory_non_prefetchable, "\n", " - ")
  Label105.Text = "OpenGL Vendor: " & Replace(opengl_vendor_string, "\n", "")
  Label106.Text = "OpenGL Renderer: " & Replace(opengl_renderer_string, "\n", "")
  Label107.Text = "OpenGL Version: " & Replace(opengl_version_string, "\n", "")
  Label108.Text = "Present resolution: " & Replace(rozdzielczosc, "\n", "")
  TextBox1.Text = RTrim(Replace(gpu, "\n", ""))
  Label109.Text = Replace(available_resolutions, "\n", "")
  Global.kartagraficzna()
End

Public Sub Wykrywanie_procesorow()
  Dim eloaders, eloaders2, eloaders3 As String
  Dim obrazekcpu, cpu_MHz, power_management As String
  Dim model, stepping, cpu_family, bogomips As String
  Dim address_sizes, cache_size, ldata, linstruction As String
  Dim physical_id, cpu_cores, level3cache As String
  
  If ComboBox1.Text = "Processor0" Then
  eloaders = "1p"
  eloaders2 = "cpu0"
  eloaders3 = "1p"
  Endif
  If ComboBox1.Text = "Processor1" Then
  eloaders = "2p"
  eloaders2 = "cpu1"
  eloaders3 = "3p"
  Endif
  If ComboBox1.Text = "Processor2" Then
  eloaders = "3p"
  eloaders2 = "cpu2"
  eloaders3 = "5p"
  Endif
  If ComboBox1.Text = "Processor3" Then
  eloaders = "4p"
  eloaders2 = "cpu3"
  eloaders3 = "7p"
  Endif
  If ComboBox1.Text = "Processor4" Then
  eloaders = "5p"
  eloaders2 = "cpu4"
  eloaders3 = "9p"
  Endif
  If ComboBox1.Text = "Processor5" Then
  eloaders = "6p"
  eloaders2 = "cpu5"
  eloaders3 = "11p"
  Endif
  If ComboBox1.Text = "Processor6" Then
  eloaders = "7p"
  eloaders2 = "cpu6"
  eloaders3 = "13p"
  Endif
  If ComboBox1.Text = "Processor7" Then
  eloaders = "8p"
  eloaders2 = "cpu7"
  eloaders3 = "15p"
  Endif
  If ComboBox1.Text = "Processor8" Then
  eloaders = "9p"
  eloaders2 = "cpu8"
  eloaders3 = "17p"
  Endif
  If ComboBox1.Text = "Processor9" Then
  eloaders = "10p"
  eloaders2 = "cpu9"
  eloaders3 = "19p"
  Endif
  If ComboBox1.Text = "Processor10" Then
  eloaders = "11p"
  eloaders2 = "cpu10"
  eloaders3 = "21p"
  Endif
  If ComboBox1.Text = "Processor11" Then
  eloaders = "12p"
  eloaders2 = "cpu11"
  eloaders3 = "23p"
  Endif
  
  Shell "grep 'vendor_id' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To obrazekcpu
  Shell "grep 'model name' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2 | cut -d '@' -f 1" Wait To cpu
  Shell "grep 'vendor_id' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To vendor_id
  Shell "grep 'flags' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To flags
  Shell "grep 'cpu MHz' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cpu_MHz
  Shell "grep 'model' /proc/cpuinfo | sed -n '" & eloaders3 & "' | cut -d ':' -f 2" Wait To model
  Shell "grep 'stepping' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To stepping
  Shell "grep 'cpu family' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To cpu_family
  Shell "grep 'bogomips' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To bogomips
  Shell "grep 'address sizes' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To address_sizes
  Shell "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index2/size" Wait To cache_size
  Shell "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index0/size" Wait To ldata
  Shell "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index1/size" Wait To linstruction
  Shell "cat /sys/devices/system/cpu/" & eloaders2 & "/cache/index3/size" Wait To level3cache
  Shell "grep 'siblings' /proc/cpuinfo | sed -n '1p' | cut -d ':' -f 2" Wait To cpu_cores
  Shell "grep 'physical id' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To physical_id
  Shell "grep 'power management' /proc/cpuinfo | sed -n '" & eloaders & "' | cut -d ':' -f 2" Wait To power_management
  Label14.Text = Replace(cpu, "\n", "")
  flags = Replace(flags, "\n", "")
  'FFlags._init
  Label71.Text = "Flags: " & FFlags.instructions
  Label13.Text = UCase$(Replace(Replace(Replace(vendor_id, "Authentic", ""), "Genuine", ""), "\n", ""))
  Label12.Text = Replace(cpu_MHz, "\n", "") & " MHz"
  Label1.Text = "L1 Data:        " & Replace(ldata, "\n", "")
  Label2.Text = "L1 instruction: " & Replace(linstruction, "\n", "")
  Label3.Text = "Level 2:        " & Replace(cache_size, "\n", "")
  Label5.Text = "Level 3:        " & Replace(level3cache, "\n", "")
  Label97.Text = "Family: " & Replace(cpu_family, "\n", "")
  Label6.Text = "Model: " & Replace(model, "\n", "")
  Label7.Text = "Stepping: " & Replace(stepping, "\n", "")
  Label8.Text = "Cores: " & Replace(cpu_cores, "\n", "")
  Label19.Text = "Phy id: " & Replace(physical_id, "\n", "")
  Label10.Text = "Bogomips: " & Replace(bogomips, "\n", "")
  Label11.Text = "Address sizes: " & Replace(address_sizes, "\n", "")
  Label15.Text = "Power mangament: " & Replace(power_management, "\n", "")
  Global.ikonaprocka()
  Logs("Get info from database", Logger.Info)
  Object.Call(FCpudb, "_inits")
End

Public Sub Button2_Click()
   ScreenShotM.pic = Desktop.Screenshot(Me.X, Me.Y, Me.W + 4, Me.H + 30)
   If FUdisks.Above = 1 Then
    FUdisks.Hide
   Endif
   If Finfosys.Above = 1 Then
    Finfosys.Hide
   Endif
   ScreenShot.Show
   
End

Public Sub Button1_Click()
  Settings["Window/X"] = Me.X
  Settings["Window/Y"] = Me.Y
  Logs("Good bye!", Logger.Info)
  Me.Close
End

Public Sub dospam_uptime()
  Dim total, used, freee, shared, buffers, cached, usedonthistime, swaptotal As String
  Dim dospam, totpam, totalswap, usedswap As String
  Shell "free -m | grep 'Mem' | awk {'print $2'}" Wait To total
  Shell "free -m | awk {'print $3'} | sed -n '2p'" Wait To used
  Shell "free -m | awk {'print $4'} | sed -n '2p'" Wait To freee
  Shell "free -m | awk {'print $5'} | sed -n '2p'" Wait To shared
  Shell "free -m | awk {'print $6'} | sed -n '2p'" Wait To buffers
  Shell "free -m | awk {'print $7'} | sed -n '2p'" Wait To cached
  Shell "free -m | grep - | awk {'print $3'}" To dospam
  Shell "free -m | grep - | awk {'print $3'}" To usedonthistime
  Shell "free -m | grep Mem | awk {'print $2'}" Wait To totpam
  Shell "free -m | grep 'Swap:' | awk {'print $2'}" Wait To swaptotal
  'Obliczanie zajętości swap
  Shell "/sbin/swapon -s | awk {'print $3'} | sed -n '2p'" Wait To totalswap
  Shell "/sbin/swapon -s | awk {'print $4'} | sed -n '2p'" Wait To usedswap
  'Exec ["/sbin/swapon -s ", "awk {'print $3'}", "sed -n '2p'"] Wait To totalswap
  'Exec ["/sbin/swapon -s", "awk {'print $4'}", "sed -n '2p'"] Wait To usedswap
  swaptotal = Replace(swaptotal, "\n", "")
  usedonthistime = Replace(usedonthistime, "\n", "")
  cached = Replace(cached, "\n", "")
  buffers = Replace(buffers, "\n", "")
  shared = Replace(shared, "\n", "")
  freee = Replace(freee, "\n", "")
  used = Replace(used, "\n", "")
  total = Replace(total, "\n", "")
  Label85.Text = "Total:   " & total & " MB"
  Label86.Text = "Used:   " & used & " MB"
  Label87.Text = "Free:   " & freee & " MB"
  Label88.Text = "Shared:   " & shared & " MB"
  Label89.Text = "Buffers:   " & buffers & " MB"
  Label90.Text = "Cached:   " & cached & " MB"
  TextLabel7.Text = usedonthistime & " MB"
  Label91.Text = "SWAP Total:   " & swaptotal & " MB " ""
  Try TextLabel24.Text = (Replace(Replace(usedswap, " ", ""), "\n", "") / 1000) & " MB"
  Try Exec ["/usr/bin/uptime"] Wait To TextBox58.Text
  TextBox58.Text = Replace(TextBox58.Text, "\n", "")
  Try ProgressBar1.Value = Replace(Replace(dospam, " ", ""), "\n", "") / Replace(Replace(totpam, " ", ""), "\n", "")
  Try ProgressBar4.Value = Replace(Replace(usedswap, " ", ""), "\n", "") / Replace(Replace(totalswap, " ", ""), "\n", "")
  Try TextArea2.Text = File.Load("/proc/mtrr")
  
End

Public Sub battery_info()
 Logs("Get information Active Battery", Logger.Info)
 TextBox7.Text = battery.Present
 TextBox8.Text = battery.Design_capacity
 TextBox9.Text = battery.last_full_capacity
 TextBox10.Text = battery.battery_technology
 TextBox11.Text = battery.design_voltage
 TextBox12.Text = battery.design_capacity_warning
 TextBox13.Text = battery.design_capacity_low
 TextBox14.Text = battery.cycle_count
 TextBox15.Text = battery.capacity_granularity_1
 TextBox16.Text = battery.capacity_granularity_2
 TextBox17.Text = battery.model_number
 TextBox18.Text = battery.serial_number
 TextBox19.Text = battery.battery_type
 TextBox20.Text = battery.OEM_info
 Logs("Get information Active Battery Done", Logger.Info)
 
End


Public Sub Button3_Click()
  Logs("Show About Window", Logger.Info)
  About.Show

End

Public Sub Button4_Click()

  Desktop.Open("http://www.cpu-world.com/cgi-bin/SearchSite.pl?SEARCH=" & Label14.Text & "&PROCESS=Search")
  Logs("Open website for more informations about your processor", Logger.Info)
End

Public Sub Button7_Click()
  Dim dpkg As String
  Dim rpm As String
  Dim pkg As String
  Shell "grep '^Status: install ok installed' /var/lib/dpkg/status | wc -l" Wait To dpkg
  Shell "rpm -qa | wc -l" Wait To rpm
  Shell "pacman -Q|wc -l" Wait To pkg
  TextLabel21.Visible = True
  TextLabel21.Text = "" & dpkg & " deb, " & rpm & " rpm, " & pkg & "pkg, Packages are installed "
End

Public Sub Button10_Click()

 Object.Call(battery, "_inits")
 Logs("Battery initial", Logger.Info)
End

Public Sub ComboBox3_Click()
Disk_Drives.get_informations()
refreshing()
End

Public Sub ComboBox4_Click()

 Disk_Drives._init_2()
 Disk_Drives.get_informations()
 refreshing()
End

Public Sub refreshing()
 
 Label16.Text = "Device model: " & Disk_Drives.device_model & ""
 Label17.Text = "Device vendor: " & Disk_Drives.device_vendor & ""
 Label38.Text = "Device real size: " & Disk_Drives.real_size & ""
 Label39.Text = "Filesystem type: " & Disk_Drives.filesystem_type & ""
 Label41.Text = "Device rev: " & Disk_Drives.device_rev & ""
 Label42.Text = "Max sectors: " & Disk_Drives.max_sectors & ""
 Label43.Text = "State: " & Disk_Drives.device_state & ""
 Label44.Text = "Modalias: " & Disk_Drives.modalias & ""
 Label46.Text = "Ext range: " & Disk_Drives.ext_range & ""
 Label47.Text = "Range: " & Disk_Drives.range & ""
 Label49.Text = "Add random: " & Disk_Drives.add_random & ""
 Label50.Text = "Discard granularity: " & Disk_Drives.discard_granularity & ""
 Label51.Text = "Discard max bytes: " & Disk_Drives.discard_max_bytes & ""
 Label52.Text = "Discard zeroes data: " & Disk_Drives.discard_zeroes_data & ""
 Label53.Text = "HW sector size: " & Disk_Drives.hw_sector_size & ""
 Label54.Text = "Max HW sectors kb: " & Disk_Drives.max_hw_sectors_kb & ""
 Label55.Text = "Max sectors kb: " & Disk_Drives.max_sectors_kb & ""
 Label56.Text = "Max segments: " & Disk_Drives.max_segments & ""
 Label57.Text = "Max segment size: " & Disk_Drives.max_segment_size & ""
 Label58.Text = "Read ahead kb: " & Disk_Drives.read_ahead_kb & ""
 Label59.Text = "Scheduler: " & Disk_Drives.scheduler & ""
 
Label126.Text = "logical_block_size: " & Disk_Drives.logical_block_size & "" ' logical_block_size
Label127.Text = "iostats: " & Disk_Drives.iostats & "" ' iostats
Label128.Text = "minimum_io_size: " & Disk_Drives.minimum_io_size & "" ' minimum_io_size
Label129.Text = "nomerges: " & Disk_Drives.nomerges & "" ' nomerges
Label130.Text = "nr_requests: " & Disk_Drives.nr_requests & "" ' nr_requests
Label131.Text = "optimal_io_size: " & Disk_Drives.optimal_io_size & "" ' optimal_io_size
Label132.Text = "physical_block_size: " & Disk_Drives.physical_block_size & "" ' physical_block_size
Label133.Text = "rotational: " & Disk_Drives.rotational & "" ' rotational
Label134.Text = "rq_affinity: " & Disk_Drives.rq_affinity & "" ' rq_affinity
 
 Label123.Text = "BDI max_ratio: " & Disk_Drives.max_ratio & "" 
 Label124.Text = "BDI min_ratio: " & Disk_Drives.min_ratio & "" 
 Label125.Text = "BDI stable_pages_required: " & Disk_Drives.stable_pages_required & "" 
 
 If Disk_Drives.removable Like "0" Then
 Label45.Text = "Removable: No"
 Endif
 If Disk_Drives.removable Like "1" Then
 Label45.Text = "Removable: Yes"
 Endif
 If Disk_Drives.Used <> 0 Then
 Try ProgressBar2.Value = Disk_Drives.Used / 100
 ProgressBar2.ToolTip = Disk_Drives.Used & "%"
 Endif
 If Disk_Drives.Used = Null Then
 ProgressBar2.Value = 0
 ProgressBar2.ToolTip = "Unknown"
 Endif
 If Disk_Drives.check_swap Like "" & ComboBox3.Text & "" Then
 Label48.Visible = True
 Else
 Label48.Visible = False
 Endif
 
 TextBox48.Text = Disk_Drives.mount_point
 TextBox52.Text = Disk_Drives.device_uuid
 TextBox53.Text = Disk_Drives.mount_widtch
End

Public Sub ComboBox5_Click()

 USB_Drives.get_informations()

End

Public Sub ComboBox6_Click()

 Asound_Drives._get_informations()

End

Public Sub ComboBox7_Click()

 Input_Devices._get_informations()

End

Public Sub Button12_Click()
 Me.Hide
 FReport_Gen.Show

End

Public Sub Timer1_Timer()
  ''Refresh temp 1500/ms
  dospam_uptime()
  thermal_zone._inits
  If thermal_zone.supporttemp = True Then
   Label93.Text = "Temp: " & (thermal_zone.calculate / 1000) & " C"
  Else
   Label93.Visible = False
  Endif
  
End

Public Sub Button6_Click()

 FModules.Show

End

Public Sub Button13_Click()

 Desktop.Open("http://tuxportal.pl/forum/")
 Logs("Reporting bug to http://tuxportal.pl/forum/", Logger.Info)

End

Public Sub ComboBox2_Click()
 net.get_informations_about_net_interface()
 TextBox56.Text = net.subsystem_device
 TextBox57.Text = net.subsystem_vendor
 TextArea4.Text = net.lspci
End

Public Sub Button8_Click()

 FDF.Show

End

Public Sub Button9_Click()

 FNET_R_T.Show

End

Public Sub ComboBox8_Click()

 Object.Call(FGraphic, "_check")

End

Public Sub Button14_Click()

 FUdisks.Show

End

Public Sub Button15_Click()

 Clipboard.Copy(TextBox58.Text)

End

Public Sub Orientation_Top_Click()
 
 TabStrip1.Orientation = Align.Top
 
End

Public Sub Orientation_Bottom_Click()
 
 TabStrip1.Orientation = Align.Bottom
 
End

Public Sub Orientation_Left_Click()
 
 TabStrip1.Orientation = Align.Left
 
End

Public Sub Orientation_Right_Click()
 
 TabStrip1.Orientation = Align.Right
 
End

Public Sub Reportthisw_Click()
 Select Case TabStrip1.Current.Text
  Case "CPU"
   FReport_Gen.CheckBox1.Value = True
  Case "GPU"
   FReport_Gen.CheckBox3.Value = True
  Case "Mobo"
   FReport_Gen.CheckBox2.Value = True
  Case "Audio"
   FReport_Gen.CheckBox4.Value = True
  Case "Drives"
   FReport_Gen.CheckBox14.Value = True
  Case "System"
   FReport_Gen.CheckBox5.Value = True
  Case "Kernel"
   FReport_Gen.CheckBox12.Value = True
 End Select
 FReport_Gen.Show
 
End

Public Sub TabStrip1_Click()
 If TabStrip1.Current.Text = "CPU" Then
  ComboBox1.Visible = True
 Else
  ComboBox1.Visible = False
 Endif
 If TabStrip1.Current.Text = "GPU" Then
  ComboBox8.Visible = True
  Button11.Visible = True
 Else
  ComboBox8.Visible = False
  Button11.Visible = False
 Endif
 If TabStrip1.Current.Text = "Drives" Then
  HBox19.Visible = True
  Button8.Visible = True
  Button14.Visible = True
 Else
  HBox19.Visible = False
  Button8.Visible = False
  Button14.Visible = False
 Endif
 '
 Me.Text = "I-Nex / " & TabStrip1.Current.Text 

End

Public Sub Form_Move()
 
 Settings["Window/X"] = Me.X
 Settings["Window/Y"] = Me.Y
 
End

Public Sub Button11_Click()

 FEDID.Show

End
